openapi: 3.0.0
info:
  version: 1.0.0
  title: Floral Auth API

paths:
  %{~ if containers.auth.account.id != "" }
  /api/v1/users/:createAccount:
    post:
      description: Create user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserAccountReq"
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserAccountRes"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-rate-limit:
        allRequests:
          rpm: 10
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: ${containers.auth.account.id}
        service_account_id: ${containers.auth.account.sa_id}
  /api/v1/users/:createSellerAccount:
    post:
      description: Create seller account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSellerAccountReq"
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSellerAccountRes"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-rate-limit:
        allRequests:
          rpm: 5
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: ${containers.auth.account.id}
        service_account_id: ${containers.auth.account.sa_id}
  /api/v1/users/:authenticate:
    post:
      description: Authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticateReq"
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticateRes"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-rate-limit:
        allRequests:
          rpm: 50
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: ${containers.auth.account.id}
        service_account_id: ${containers.auth.account.sa_id}
  /api/v1/users/:replaceRefreshToken:
    post:
      description: Authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplaceRefreshTokenReq"
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplaceRefreshTokenRes"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-rate-limit:
        allRequests:
          rpm: 50
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: ${containers.auth.account.id}
        service_account_id: ${containers.auth.account.sa_id}
  /api/v1/users/:createAccessToken:
    post:
      description: Authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccessTokenReq"
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAccessTokenRes"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: ${containers.auth.account.id}
        service_account_id: ${containers.auth.account.sa_id}
  %{~ endif }
  "${auth_email_confirmation_api_endpoint}":
    x-yc-apigateway-cors:
      origin: true
      methods: POST
    get:
      summary: Confirm account email via token
      operationId: confirm_email
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      x-yc-apigateway-integration:
        type: dummy
        http_code: 200
        content:
          text/html: |-
            <!DOCTYPE html>
            <html>
              <head>
                <link rel="icon" href="data:,">
              </head>
              <body>
                <script defer>
                  function report(message) {
                    window.document.body.innerHTML = '<div>' + message + '</div>'
                  }
                  function reportProblem(message) {
                    report('Error: ' + message)
                  }
                  function reportSuccess(message) {
                    report(message)
                  }

                  document.addEventListener("DOMContentLoaded", main)

                  async function main() {
                    if (new URLSearchParams(window.location.search).get("token") === null) {
                      reportProblem("Failed to confirm email: token query parameter must be set")
                    }
                    try {
                      const response = await fetch(window.location.origin + window.location.pathname, {
                        method: "POST",
                        headers: {
                          "Content-Type": "application/json",
                        },
                        body: JSON.stringify({token: new URLSearchParams(window.location.search).get("token")}),
                      })
                      if (response.ok) {
                        reportSuccess("Successfuly confirmed email.")
                        const responseBody = await response.json()
                        console.log(responseBody)
                        return
                      }

                      const responseBody = await response.json()
                      if ('errors' in responseBody) {
                        reportProblem(JSON.stringify(responseBody.errors, null, 2))
                        return
                      }

                      console.error("Unknown upstream server error format", data)
                      throw new Error("Unknown upstream server error format")
                    } catch (err) {
                        console.error(err)
                        reportProblem("Could not confirm email (server internal error).")
                    }
                  }
                </script>
              </body>
            </html>

    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: ${containers.auth.email_confirmation.id}
        service_account_id: ${containers.auth.email_confirmation.sa_id}

components:
  schemas:
    CreateUserAccountReq:
      type: object
      required:
        - email
        - name
        - password
      properties:
        email:
          type: string
        name:
          type: string
        password:
          type: string
    CreateUserAccountRes:
      type: object
      required:
        - id
        - name
      properties:
        email:
          type: string
        name:
          type: string
    CreateSellerAccountReq:
      type: object
      required:
        - seller
        - access_token
      properties:
        seller:
          type: object
          properties:
            email:
              type: string
            name:
              type: string
            password:
              type: string
        access_token:
          type: string
    CreateSellerAccountRes:
      type: object
      required:
        - id
        - name
      properties:
        email:
          type: string
        name:
          type: string
    AuthenticateReq:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    AuthenticateRes:
      type: object
      required:
        - refresh_token
        - expires_at
      properties:
        refresh_token:
          type: string
        expires_at:
          type: string
    ReplaceRefreshTokenReq:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
    ReplaceRefreshTokenRes:
      type: object
      required:
        - refresh_token
        - expires_at
      properties:
        refresh_token:
          type: string
        expires_at:
          type: string
    CreateAccessTokenReq:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
    CreateAccessTokenRes:
      type: object
      required:
        - access_token
        - expires_at
      properties:
        access_token:
          type: string
        expires_at:
          type: string
    Error:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            type: object
            required:
              - code
              - message
            properties:
              code:
                type: integer
              message:
                type: string
