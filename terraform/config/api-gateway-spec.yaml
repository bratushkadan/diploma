openapi: 3.0.0
info:
  version: 0.1.0
  title: Ecom API

tags:
  - name: auth
    description: Authentication service
  - name: products
    description: Products service
  - name: catalog
    description: Catalog service
  - name: cart
    description: Cart service
  - name: orders
    description: Orders service
  - name: feedback
    description: Product reviews service

paths:
  ### Users
  # TODO:
  # /api/v1/users/
  #  get: # List
  # /api/v1/users/{user_id}:
  #  get: # Get
  /api/v1/users/:createAccount:
    post:
      summary: Create user account
      description: Create user account
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserAccountReq'
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserAccountRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-rate-limit:
        allRequests:
          rpm: 10
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.auth.account.id}'
        service_account_id: '${containers.auth.account.sa_id}'
  /api/v1/users/:createSellerAccount:
    post:
      summary: Create seller account
      description: Create seller account
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSellerAccountReq'
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSellerAccountRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-rate-limit:
        allRequests:
          rpm: 5
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.auth.account.id}'
        service_account_id: '${containers.auth.account.sa_id}'
  /api/v1/users/:authenticate:
    post:
      summary: Get refresh token
      description: Authenticate
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateReq'
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-rate-limit:
        allRequests:
          rpm: 50
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.auth.account.id}'
        service_account_id: '${containers.auth.account.sa_id}'
  /api/v1/users/:replaceRefreshToken:
    post:
      summary: Replace refresh token
      description: Authenticate - replace old refresh token with the new one.
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceRefreshTokenReq'
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceRefreshTokenRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-rate-limit:
        allRequests:
          rpm: 50
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.auth.account.id}'
        service_account_id: '${containers.auth.account.sa_id}'
  /api/v1/users/:createAccessToken:
    post:
      summary: Get access token
      description: Get access token
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessTokenReq'
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccessTokenRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.auth.account.id}'
        service_account_id: '${containers.auth.account.sa_id}'
  /api/v1/users/:confirm_email:
    x-yc-apigateway-cors:
      origin: true
      methods: POST
    get:
      summary: Confirm account email via token
      tags:
        - auth
      operationId: confirm_email
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      x-yc-apigateway-integration:
        type: dummy
        http_code: 200
        content:
          text/html: |-
            <!DOCTYPE html>
            <html>
              <head>
                <link rel="icon" href="data:,">
              </head>
              <body>
                <script defer>
                  function report(message) {
                    window.document.body.innerHTML = '<div>' + message + '</div>'
                  }
                  function reportProblem(message) {
                    report('Error: ' + message)
                  }
                  function reportSuccess(message) {
                    report(message)
                  }

                  document.addEventListener("DOMContentLoaded", main)

                  async function main() {
                    if (new URLSearchParams(window.location.search).get("token") === null) {
                      reportProblem("Failed to confirm email: token query parameter must be set")
                    }
                    try {
                      const response = await fetch(window.location.origin + window.location.pathname, {
                        method: "POST",
                        headers: {
                          "Content-Type": "application/json",
                        },
                        body: JSON.stringify({token: new URLSearchParams(window.location.search).get("token")}),
                      })
                      if (response.ok) {
                        reportSuccess("Successfuly confirmed email.")
                        const responseBody = await response.json()
                        console.log(responseBody)
                        return
                      }

                      const responseBody = await response.json()
                      if ('errors' in responseBody) {
                        reportProblem(JSON.stringify(responseBody.errors, null, 2))
                        return
                      }

                      console.error("Unknown upstream server error format", data)
                      throw new Error("Unknown upstream server error format")
                    } catch (err) {
                        console.error(err)
                        reportProblem("Could not confirm email (server internal error).")
                    }
                  }
                </script>
              </body>
            </html>

    post:
      summary: Confirm email via token
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.auth.email_confirmation.id}'
        service_account_id: '${containers.auth.email_confirmation.sa_id}'
  ### Products
  /api/private/v1/products:reserve:
    x-private-api: true
    post:
      summary: Reserve products
      description: Reserve products
      tags:
        - products
      operationId: products_reserve
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateReserveProductsReq'
      responses:
        200:
          description: Products data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateReserveProductsRes'
        default:
          $ref: '#/components/responses/Error'
  /api/private/v1/products:unreserve:
    x-private-api: true
    post:
      summary: List products
      description: List products
      tags:
        - products
      operationId: products_unreserve
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateUnreserveProductsReq'
      responses:
        200:
          description: Products data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUnreserveProductsRes'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/products:
    get:
      summary: List products
      description: List products
      tags:
        - products
      operationId: products_list
      parameters:
        - name: filter
          description: Filter, such as "seller.id=foo" or "seller.id=foo&name=bar&in_stock=*"
          in: query
          schema:
            type: string
        - name: maxPageSize
          description: Max number of returned results
          in: query
          schema:
            type: integer
            minimum: 1
        - name: nextPageToken
          in: query
          schema:
            type: string
      responses:
        200:
          description: Products data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProductsRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.products.id}'
        service_account_id: '${containers.products.sa_id}'
    post:
      summary: 'Create product'
      description: ''
      operationId: products_create
      tags:
        - products
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductReq'
      responses:
        200:
          description: Product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProductRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.products.id}'
        service_account_id: '${containers.products.sa_id}'
  /api/v1/products/{product_id}:
    get:
      summary: Get product
      description: |
        Example requestBody:
        ```
        GET /api/v1/products/{id}
        ```z
      tags:
        - products
      operationId: products_get
      parameters:
        - name: product_id
          description: product id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.products.id}'
        service_account_id: '${containers.products.sa_id}'
    patch:
      summary: ''
      description: ''
      operationId: products_update
      tags:
        - products
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          description: product id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductReq'
      responses:
        200:
          description: Product updated fields data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProductRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.products.id}'
        service_account_id: '${containers.products.sa_id}'
    delete:
      summary: ''
      description: ''
      tags:
        - products
      operationId: products_delete
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          description: product id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Id of the deleted product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProductRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.products.id}'
        service_account_id: '${containers.products.sa_id}'
  /api/v1/products/{product_id}/pictures:
    post:
      summary: Upload a product picture
      description: Upload a product picture to display for a product (max 1 per request, max 3 in total)
      operationId: products_upload_picture
      tags:
        - products
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          description: product id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                caption:
                  type: string
            encoding:
              file:
                contentType: image/jpeg, image/png
      responses:
        200:
          description: Data of uploaded picture
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadProductPictureRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.products.id}'
        service_account_id: '${containers.products.sa_id}'
  /api/v1/products/{product_id}/pictures/{id}:
    delete:
      summary: Delete a product picture
      operationId: products_delete_picture
      tags:
        - products
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          description: product id
          in: path
          required: true
          schema:
            type: string
        - name: id
          description: picture id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Deleted picture's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProductPictureRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.products.id}'
        service_account_id: '${containers.products.sa_id}'
  /api/v1/catalog:
    get:
      summary: Query catalog
      operationId: catalog_get
      tags:
        - catalog
      parameters:
        - name: next_page_token
          in: query
          required: false
          schema:
            type: string
        - name: filter
          description: query search filter
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: Catalog data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogGetRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.catalog.id}'
        service_account_id: '${containers.catalog.sa_id}'

  ### Cart
  /api/private/v1/cart:publish-contents:
    x-private-api: true
    post:
      summary: Publish carts contents
      description: Publish carts contents as events/messages
      tags:
        - cart
      operationId: private_cart_publish_contents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivatePublishCartPositionsReq'
      responses:
        200:
          description: Cart positions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivatePublishCartPositionsRes'
        default:
          $ref: '#/components/responses/Error'
  /api/private/v1/cart:clear-contents:
    x-private-api: true
    post:
      summary: Clear carts contents
      description: Clear carts contents
      tags:
        - cart
      operationId: carts_clear_contents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateClearCartPositionsReq'
      responses:
        200:
          description: Clear cart contents success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateClearCartPositionsRes'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/cart/{user_id}/positions:
    get:
      summary: Get cart positions
      operationId: cart_get_cart_positions
      tags:
        - cart
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          description: user id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Cart positions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartGetCartPositionsRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.cart.id}'
        service_account_id: '${containers.cart.sa_id}'
    delete:
      summary: Clear cart
      operationId: cart_clear_cart
      tags:
        - cart
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          description: user id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Clear cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartClearCartRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.cart.id}'
        service_account_id: '${containers.cart.sa_id}'
  /api/v1/cart/{user_id}/positions/{product_id}:
    put:
      summary: Set cart position
      operationId: cart_set_cart_position
      tags:
        - cart
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          description: user id
          in: path
          required: true
          schema:
            type: string
        - name: product_id
          description: product id
          in: path
          required: true
          schema:
            type: string
        - name: count
          description: product positions count
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Set cart position
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartSetCartPositionRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.cart.id}'
        service_account_id: '${containers.cart.sa_id}'
    delete:
      summary: Delete cart position
      operationId: cart_delete_cart_position
      tags:
        - cart
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          description: user id
          in: path
          required: true
          schema:
            type: string
        - name: product_id
          description: product id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Delete cart position
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDeleteCartPositionRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.cart.id}'
        service_account_id: '${containers.cart.sa_id}'

  ### Order
  /api/private/v1/order:process-published-cart-positions:
    x-private-api: true
    post:
      summary: Process published cart positions
      description: Process published cart positions
      tags:
        - orders
      operationId: private_orders_published_cart_positions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateOrderProcessPublishedCartPositionsReq'
      responses:
        200:
          description: Published cart positions processing response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateOrderProcessPublishedCartPositionsRes'
        default:
          $ref: '#/components/responses/Error'
  /api/private/v1/order:process-reserved-products:
    x-private-api: true
    post:
      summary: Process reserved products
      description: Process reserved products
      tags:
        - orders
      operationId: private_orders_process_reserved_products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateOrderProcessReservedProductsReq'
      responses:
        200:
          description: Reserved products processing response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateOrderProcessReservedProductsRes'
        default:
          $ref: '#/components/responses/Error'
  /api/private/v1/order:cancel-orders:
    x-private-api: true
    post:
      summary: Cancel orders
      description: Cancel orders
      tags:
        - orders
      operationId: private_orders_cancel_orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateOrderCancelOrdersReq'
      responses:
        200:
          description: Cancel order response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateOrderCancelOrdersRes'
        default:
          $ref: '#/components/responses/Error'
  /api/private/v1/order:batch-cancel-unpaid-orders:
    x-private-api: true
    post:
      summary: Batch cancel unpaid orders
      description: Batch cancel unpaid orders
      tags:
        - orders
      operationId: private_orders_batch_cancel_unpaid_orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateOrderBatchCancelUnpaidOrdersReq'
      responses:
        200:
          description: Batch cancel unpaid orders operation start response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateOrderBatchCancelUnpaidOrdersRes'
        default:
          $ref: '#/components/responses/Error'
  # GetOrderOperation
  /api/v1/order/operations/{operation_id}:
    get:
      # AUTH
      # OrdersGetOperationRes
  # GetOrder, UpdateOrder (change state, e.g. cancel, promote to new state, etc)
  /api/v1/order/orders/{order_id}:
    get:
      # AUTH
      # OrdersGetOrderRes
    patch:
      # AUTH
      # OrdersUpdateOrderReq
      # OrdersUpdateOrderRes
  # CreateOrder, ListOrders
  /api/v1/order/orders:
    get:
      {}
      # AUTH
      # OrdersListOrdersRes
    post:
      {}
      # AUTH
      # no req required, user_id will be inferred from the
      # auth token
      # OrdersCreateOrderRes
  # TODO:
  # ProcessPayment (process payment, thus change status of an order)
  # /api/v1/order/processPayment/{provider} (e.g. yoomoney)

  ### Feedback
  /api/private/v1/feedback/orders:process_completed_order:
    x-private-api: true
    post:
      summary: Process completed order contents
      description: Process completed order contents (so that user has a permission to leave feedback for a product)
      tags:
        - feedback
      operationId: feedback_process_completed_order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateFeedbackProcessCompletedOrderReq'
      responses:
        200:
          description: Products data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateFeedbackProcessCompletedOrderRes'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/feedback/products/rating:
    get:
      # @ ListRatings - get rating by list of ids (max 20)
      # FeedbackListProductRatingsRes
  # GetRating
  /api/v1/feedback/products/{product_id}/rating:
    get:
      # FeedbackGetProductRatingRes
  # ListReviews (max 20), AddReview (rating + text)
  /api/v1/feedback/products/{product_id}/reviews:
    get:
      # FeedbackListProductReviewsRes
    post:
      # FeedbackCreateProductReviewReq
      # FeedbackCreateProductReviewRes
  # GetReview, EditReview (rating + text), DeleteReview
  /api/v1/feedback/reviews/{product_id}/reviews/{review_id}:
    get:
      # FeedbackGetProductReviewRes
    patch:
      # FeedbackUpdateProductReviewReq
      # FeedbackUpdateProductReviewRes
    delete:
      # FeedbackDeleteProductReviewRes

components:
  securitySchemes:
    # TODO: jwtHeaderAuth
    bearerAuth:
      # See https://yandex.cloud/ru/docs/serverless-containers/concepts/invoke#filter
      type: apiKey
      name: X-Authorization
      in: header
      # Bearer is expected to be used in conjunction with the "Authorization" header
      # type: http
      # scheme: bearer
      # bearerFormat: JWT
  schemas:
    ### Auth (Users/Email)
    CreateUserAccountReq:
      type: object
      required:
        - email
        - name
        - password
      additionalProperties: false
      properties:
        email:
          type: string
        name:
          type: string
        password:
          type: string
    CreateUserAccountRes:
      type: object
      required:
        - id
        - name
      additionalProperties: false
      properties:
        email:
          type: string
        name:
          type: string
    CreateSellerAccountReq:
      type: object
      required:
        - seller
        - access_token
      additionalProperties: false
      properties:
        seller:
          type: object
          required:
            - name
            - email
            - password
          properties:
            email:
              type: string
            name:
              type: string
            password:
              type: string
        access_token:
          type: string
    CreateSellerAccountRes:
      type: object
      required:
        - id
        - name
      additionalProperties: false
      properties:
        email:
          type: string
        name:
          type: string
    AuthenticateReq:
      type: object
      required:
        - email
        - password
      additionalProperties: false
      properties:
        email:
          type: string
        password:
          type: string
    AuthenticateRes:
      type: object
      required:
        - refresh_token
        - expires_at
      additionalProperties: false
      properties:
        refresh_token:
          type: string
        expires_at:
          type: string
    ReplaceRefreshTokenReq:
      type: object
      required:
        - refresh_token
      additionalProperties: false
      properties:
        refresh_token:
          type: string
    ReplaceRefreshTokenRes:
      type: object
      required:
        - refresh_token
        - expires_at
      additionalProperties: false
      properties:
        refresh_token:
          type: string
        expires_at:
          type: string
    CreateAccessTokenReq:
      type: object
      required:
        - refresh_token
      additionalProperties: false
      properties:
        refresh_token:
          type: string
    CreateAccessTokenRes:
      type: object
      required:
        - access_token
        - expires_at
      additionalProperties: false
      properties:
        access_token:
          type: string
        expires_at:
          type: string

    ### Products
    ListProductsRes:
      type: object
      required:
        - products
        - next_page_token
      additionalProperties: false
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ListProductsResProduct'
        next_page_token:
          type: string
          nullable: true
    ListProductsResProduct:
      type: object
      required:
        - id
        - name
        - seller_id
        - price
        - picture_url
      additionalProperties: false
      properties:
        id:
          type: string
        name:
          type: string
        seller_id:
          type: string
        price:
          type: number
          format: double
        picture_url:
          type: string
    GetProductRes:
      type: object
      required:
        - id
        - seller_id
        - name
        - description
        - pictures
        - metadata
        - stock
        - price
        - created_at
        - updated_at
      additionalProperties: false
      properties:
        id:
          type: string
        seller_id:
          type: string
        name:
          type: string
        description:
          type: string
        pictures:
          $ref: '#/components/schemas/GetProductResPictures'
        metadata:
          type: object
        stock:
          type: integer
        price:
          type: number
          format: double
        created_at:
          type: string
        updated_at:
          type: string
    CreateProductReq:
      type: object
      required:
        - name
        - description
        - metadata
        - stock
        - price
      additionalProperties: false
      properties:
        name:
          type: string
        description:
          type: string
        stock:
          type: integer
        price:
          type: number
          format: double
        metadata:
          type: object
    CreateProductRes:
      type: object
      required:
        - id
        - seller_id
        - name
        - description
        - pictures
        - metadata
        - stock
        - price
        - created_at
        - updated_at
      additionalProperties: false
      properties:
        id:
          type: string
        seller_id:
          type: string
        name:
          type: string
        description:
          type: string
        pictures:
          $ref: '#/components/schemas/GetProductResPictures'
        metadata:
          type: object
        stock:
          type: integer
        price:
          type: number
          format: double
        created_at:
          type: string
        updated_at:
          type: string
    UpdateProductReq:
      type: object
      minProperties: 1
      additionalProperties: false
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        stock_delta:
          type: integer
          description: |-
            The amount of "in stock" product count change, either of:
            - positive: stock amount is increased (seller releases more products)
            - negative: stock amount is decreased (item purchased)
        metadata:
          type: object
    UpdateProductRes:
      type: object
      minProperties: 1
      additionalProperties: false
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        stock:
          type: integer
        metadata:
          type: object
    DeleteProductRes:
      type: object
      required:
        - id
      additionalProperties: false
      properties:
        id:
          type: string
    PrivateReserveProductsReq:
      x-tags:
        - private_api
      type: object
      required:
        - messages
      additionalProperties: false
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/PrivateReserveProductsReqMessage'
    PrivateReserveProductsReqMessage:
      x-tags:
        - private_api
      type: object
      required:
        - operation_id
        - products
      additionalProperties: false
      properties:
        operation_id:
          type: string
        products:
          $ref: '#/components/schemas/PrivateReserveProductsReqProduct'
    PrivateReserveProductsReqProduct:
      x-tags:
        - private_api
      type: object
      required:
        - id
        - count
      additionalProperties: false
      properties:
        id:
          type: string
        count:
          type: integer
    PrivateReserveProductsRes:
      x-tags:
        - private_api
      type: object
    PrivateUnreserveProductsReq:
      x-tags:
        - private_api
      type: object
      required:
        - messages
      additionalProperties: false
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/PrivateUnreserveProductsReqMessage'
    PrivateUnreserveProductsReqMessage:
      x-tags:
        - private_api
      type: object
      required:
        - order_id
        - products
      additionalProperties: false
      properties:
        order_id:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/PrivateReserveProductsReqProduct'
    PrivateUnreserveProductsReqProduct:
      x-tags:
        - private_api
      type: object
      required:
        - id
        - count
      additionalProperties: false
      properties:
        id:
          type: string
        count:
          type: integer
    PrivateUnreserveProductsRes:
      x-tags:
        - private_api
      type: object
    # Products / Pictures
    GetProductResPictures:
      type: array
      items:
        $ref: '#/components/schemas/GetProductResPicture'
    GetProductResPicture:
      type: object
      required:
        - id
        - url
      additionalProperties: false
      properties:
        id:
          type: string
        url:
          type: string
    UploadProductPictureRes:
      type: object
      required:
        - id
        - url
      additionalProperties: false
      properties:
        id:
          type: string
        url:
          type: string
    DeleteProductPictureRes:
      type: object
      required:
        - id
      additionalProperties: false
      properties:
        id:
          type: string

    ### Catalog
    CatalogGetRes:
      type: object
      required:
        - products
        - next_page_token
      additionalProperties: false
      properties:
        next_page_token:
          type: string
          nullable: true
        products:
          type: array
          items:
            $ref: '#/components/schemas/CatalogGetResProduct'
    CatalogGetResProduct:
      type: object
      required:
        - id
        - name
        - price
      additionalProperties: false
      properties:
        id:
          type: string
        name:
          type: string
        picture:
          type: string
          description: url
          nullable: true
        price:
          type: number
          format: double
    ### Cart
    CartGetCartPositionsRes:
      type: object
      required:
        - positions
      additionalProperties: false
      properties:
        positions:
          type: array
          items:
            $ref: '#/components/schemas/CartGetCartPositionsResPosition'
    CartGetCartPositionsResPosition:
      type: object
      required:
        - product_id
        - count
      additionalProperties: false
      properties:
        product_id:
          type: string
        count:
          type: integer
    CartClearCartRes:
      type: object
      required:
        - deleted_positions
      additionalProperties: false
      properties:
        deleted_positions:
          type: array
          items:
            $ref: '#/components/schemas/CartClearCartResPosition'
    CartClearCartResPosition:
      type: object
      required:
        - product_id
        - count
      additionalProperties: false
      properties:
        product_id:
          type: string
        count:
          type: integer
    CartSetCartPositionRes:
      type: object
      required:
        - set_position
      additionalProperties: false
      properties:
        set_position:
          $ref: '#/components/schemas/CartSetCartPositionResPosition'
    CartSetCartPositionResPosition:
      type: object
      required:
        - product_id
        - count
      additionalProperties: false
      properties:
        product_id:
          type: string
        count:
          type: integer
    CartDeleteCartPositionRes:
      type: object
      required:
        - deleted_position
      additionalProperties: false
      properties:
        deleted_position:
          $ref: '#/components/schemas/CartDeleteCartPositionResPosition'
    CartDeleteCartPositionResPosition:
      type: object
      required:
        - product_id
        - count
      additionalProperties: false
      properties:
        product_id:
          type: string
        count:
          type: integer
    PrivatePublishCartPositionsReq:
      x-tags:
        - private_api
      type: object
      required:
        - messages
      additionalProperties: false
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/PrivatePublishCartPositionsReqMessage'
    PrivatePublishCartPositionsReqMessage:
      x-tags:
        - private_api
      type: object
      required:
        - operation_id
        - cart_positions
      additionalProperties: false
      properties:
        operation_id:
          type: string
        cart_positions:
          $ref: '#/components/schemas/PrivatePublishCartPositionsReqItem'
    PrivatePublishCartPositionsReqItem:
      x-tags:
        - private_api
      type: object
      required:
        - product_id
        - count
      additionalProperties: false
      properties:
        product_id:
          type: string
        count:
          type: integer
    PrivatePublishCartPositionsRes:
      x-tags:
        - private_api
      type: object
    PrivateClearCartPositionsReq:
      x-tags:
        - private_api
      type: object
      required:
        - messages
      additionalProperties: false
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/PrivateClearCartPositionsReqMessage'
    PrivateClearCartPositionsReqMessage:
      x-tags:
        - private_api
      type: object
      required:
        - user_id
      additionalProperties: false
      properties:
        user_id:
          type: string
    PrivateClearCartPositionsRes:
      x-tags:
        - private_api
      type: object

    ### Orders
    PrivateOrderProcessPublishedCartPositionsReq:
      x-tags:
        - private_api
      type: object
      required:
        - messages
      additionalProperties: false
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/PrivateOrderProcessPublishedCartPositionsReqMessage'
    PrivateOrderProcessPublishedCartPositionsReqMessage:
      x-tags:
        - private_api
      type: object
      required:
        - cart_positions
        - order_id
      additionalProperties: false
      properties:
        cart_positions:
          $ref: '#/components/schemas/PrivateOrderProcessPublishedCartPositionsReqCartPosition'
        order_id:
          type: string
    PrivateOrderProcessPublishedCartPositionsReqCartPosition:
      x-tags:
        - private_api
      type: object
      required:
        - product_id
        - count
      additionalProperties: false
      properties:
        product_id:
          type: string
        count:
          type: integer
    PrivateOrderProcessPublishedCartPositionsRes:
      x-tags:
        - private_api
      type: object
    PrivateOrderProcessReservedProductsReq:
      x-tags:
        - private_api
      type: object
      required:
        - messages
      additionalProperties: false
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/PrivateOrderProcessReservedProductsReqMessage'
    PrivateOrderProcessReservedProductsReqMessage:
      x-tags:
        - private_api
      type: object
      required:
        - products
        - order_id
      additionalProperties: false
      properties:
        products:
          $ref: '#/components/schemas/PrivateOrderProcessReservedProductsReqProduct'
        order_id:
          type: string
    PrivateOrderProcessReservedProductsReqProduct:
      x-tags:
        - private_api
      type: object
      required:
        - id
        - seller_id
        - name
        - count
        - price
      additionalProperties: false
      properties:
        id:
          type: string
        seller_id:
          type: string
        name:
          type: string
        count:
          type: integer
        price:
          type: number
          format: double
        picture:
          type: string
    PrivateOrderProcessReservedProductsRes:
      x-tags:
        - private_api
      type: object
    PrivateOrderBatchCancelUnpaidOrdersReq:
      # batch-size
      x-tags:
        - private_api
      type: object
    PrivateOrderBatchCancelUnpaidOrdersRes:
      x-tags:
        - private_api
      type: object
    PrivateOrderCancelOrdersReq:
      x-tags:
        - private_api
      type: object
      required:
        - order_id
      additionalProperties: false
      properties:
        order_id:
          type: string
    PrivateOrderCancelOrdersRes:
      x-tags:
        - private_api
      type: object
    # TODO:
    # PrivateOrderProcessProductsReservationFailureReq:
    OrdersGetOperationRes:
      type: object
      required:
        - id
        - type
        - status
        - created_at
        - updated_at
      additionalProperties: false
      properties:
        id:
          type: string
        type:
          type: string
        status:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        order_id:
          type: string
    OrdersGetOrderRes:
      type: object
      required:
        - id
        - user_id
        - status
        - items
        - created_at
        - updated_at
      additionalProperties: false
      properties:
        id:
          type: string
        user_id:
          type: string
        status:
          type: string
        items:
          $ref: '#/components/schemas/OrdersGetOrderResItem'
        created_at:
          type: string
        updated_at:
          type: string
    OrdersGetOrderResItem:
      type: object
      required:
        - product_id
        - seller_id
        - name
        - count
        - price
      additionalProperties: false
      properties:
        product_id:
          type: string
        seller_id:
          type: string
        name:
          type: string
        count:
          type: integer
        price:
          type: number
          format: double
        picture_url:
          type: string
    OrdersUpdateOrderReq:
      type: object
      required:
        - status
      additionalProperties: false
      properties:
    OrdersUpdateOrderRes:
      type: object
      required:
        - status
        - updated_at
      additionalProperties: false
      properties:
    OrdersListOrdersRes:
      type: object
      required:
        - orders
      additionalProperties: false
      properties:
        orders:
          $ref: '#/components/schemas/OrdersListOrdersResOrder'
    OrdersListOrdersResOrder:
      type: object
      required:
        - id
        - user_id
        - status
        - items
      additionalProperties: false
      properties:
        id:
          type: string
        user_id:
          type: string
        status:
          type: string
        items:
          $ref: '#/components/schemas/OrdersListOrdersResItem'
        created_at:
          type: string
        updated_at:
          type: string
    OrdersListOrdersResItem:
      type: object
      required:
        - product_id
        - seller_id
        - name
        - count
        - price
      additionalProperties: false
      properties:
        product_id:
          type: string
        seller_id:
          type: string
        name:
          type: string
        count:
          type: integer
        price:
          type: number
          format: double
        picture_url:
          type: string
    OrdersCreateOrderRes:
      type: object
      required:
        - operation
      additionalProperties: false
      properties:
        operation:
          ref: '#/components/schemas/OrdersCreateOrderResOperation'
    OrdersCreateOrderResOperation:
      type: object
      required:
        - id
        - type
        - status
        - user_id
        - created_at
        - updated_at
      additionalProperties: false
      properties:
        id:
          type: string
        type:
          type: string
        status:
          type: string
        user_id:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        order_id:
          type: string

    ### Feedback
    PrivateFeedbackProcessCompletedOrderReq:
      x-tags:
        - private_api
      type: object
      required:
        - messages
      additionalProperties: false
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/PrivateFeedbackProcessCompletedOrderReqMessage'
    PrivateFeedbackProcessCompletedOrderReqMessage:
      x-tags:
        - private_api
      type: object
      required:
        - products
        - user_id
        - order_id
      additionalProperties: false
      properties:
        products:
          $ref: '#/components/schemas/PrivateFeedbackProcessCompletedOrderReqProducts'
        order_id:
          type: string
    PrivateFeedbackProcessCompletedOrderReqProducts:
      type: object
      x-tags:
        - private_api
      required:
        - id
      additionalProperties: false
      properties:
        id:
          type: string
    PrivateFeedbackProcessCompletedOrderRes:
      x-tags:
        - private_api
      type: object
    FeedbackListProductRatingsRes:
      type: object
      required:
        - ratings
      additionalProperties: false
      properties:
        ratings:
          type: array
          items:
            $ref: '#/components/schemas/FeedbackListProductRatingsResRating'
    FeedbackListProductRatingsResRating:
      type: object
      required:
        - rating
      additionalProperties: false
      properties:
        product_id:
          type: string
        rating:
          type: integer
          format: double
          minimum: 0
          maximum: 5.0
    FeedbackGetProductRatingRes:
      type: object
      required:
        - product_id
        - rating
      additionalProperties: false
      properties:
        product_id:
          type: string
        rating:
          type: integer
          format: double
          minimum: 0
          maximum: 5.0
    FeedbackListProductReviewsRes:
      type: object
      required:
        - reviews
      additionalProperties: false
      properties:
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/FeedbackListProductReviewsResReview'
    FeedbackListProductReviewsResReview:
      type: object
      required:
        - id
        - product_id
        - user_id
        - rating
        - review
        - created_at
        - updated_at
      additionalProperties: false
      properties:
        id:
          type: string
        product_id:
          type: string
        user_id:
          type: string
        rating:
          type: number
          format: double
        review:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    FeedbackCreateProductReviewReq:
      type: object
      required:
        - rating
        - review
      additionalProperties: false
      properties:
        rating:
          type: number
          format: double
        review:
          type: string
    FeedbackCreateProductReviewRes:
      type: object
      required:
        - id
        - product_id
        - user_id
        - rating
        - review
        - created_at
        - updated_at
      additionalProperties: false
      properties:
        id:
          type: string
        product_id:
          type: string
        user_id:
          type: string
        rating:
          type: number
          format: double
        review:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    FeedbackGetProductReviewRes:
      type: object
      required:
        - id
        - product_id
        - user_id
        - rating
        - review
        - created_at
        - updated_at
      additionalProperties: false
      properties:
        id:
          type: string
        product_id:
          type: string
        user_id:
          type: string
        rating:
          type: number
          format: double
        review:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    FeedbackUpdateProductReviewReq:
      type: object
      additionalProperties: false
      properties:
        rating:
          type: number
          format: double
        review:
          type: string
    FeedbackUpdateProductReviewRes:
      type: object
      required:
        - id
      additionalProperties: false
      properties:
        id:
          type: string
        rating:
          type: number
          format: double
        review:
          type: string
    FeedbackDeleteProductReviewRes:
      type: object
      required:
        - id
      additionalProperties: false
      properties:
        id:
          type: string

    ### Errors
    Err:
      type: object
      required:
        - code
        - message
      additionalProperties: false
      properties:
        code:
          type: integer
        message:
          type: string

  responses:
    # Common
    PrivateErr:
      x-tags:
        - private_api
    Error:
      description: 'error'
      content:
        application/json:
          schema:
            type: object
            required:
              - errors
            additionalProperties: false
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/Err'
