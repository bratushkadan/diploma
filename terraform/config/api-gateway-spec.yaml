openapi: 3.0.0
info:
  version: 1.0.0
  title: Floral Auth API

tags:
  - name: auth
    description: 'Service for authentication'
  - name: products
    description: 'Products service'
  - name: orders
  - name: cart
  - name: catalog
  - name: payments
  - name: feedback

paths:
  /api/v1/users/:createAccount:
    post:
      summary: Create user account
      description: Create user account
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserAccountReq'
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserAccountRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-rate-limit:
        allRequests:
          rpm: 10
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.auth.account.id}'
        service_account_id: '${containers.auth.account.sa_id}'
  /api/v1/users/:createSellerAccount:
    post:
      description: Create seller account
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSellerAccountReq'
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSellerAccountRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-rate-limit:
        allRequests:
          rpm: 5
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.auth.account.id}'
        service_account_id: '${containers.auth.account.sa_id}'
  /api/v1/users/:authenticate:
    post:
      description: Authenticate
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateReq'
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-rate-limit:
        allRequests:
          rpm: 50
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.auth.account.id}'
        service_account_id: '${containers.auth.account.sa_id}'
  /api/v1/users/:replaceRefreshToken:
    post:
      description: Authenticate
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceRefreshTokenReq'
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceRefreshTokenRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-rate-limit:
        allRequests:
          rpm: 50
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.auth.account.id}'
        service_account_id: '${containers.auth.account.sa_id}'
  /api/v1/users/:createAccessToken:
    post:
      description: Authenticate
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessTokenReq'
      responses:
        200:
          description: Data of created user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccessTokenRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.auth.email_confirmation.id}'
        service_account_id: '${containers.auth.email_confirmation.sa_id}'
  '${auth_email_confirmation_api_endpoint}':
    x-yc-apigateway-cors:
      origin: true
      methods: POST
    get:
      summary: Confirm account email via token
      tags:
        - auth
      operationId: confirm_email
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      x-yc-apigateway-integration:
        type: dummy
        http_code: 200
        content:
          text/html: |-
            <!DOCTYPE html>
            <html>
              <head>
                <link rel="icon" href="data:,">
              </head>
              <body>
                <script defer>
                  function report(message) {
                    window.document.body.innerHTML = '<div>' + message + '</div>'
                  }
                  function reportProblem(message) {
                    report('Error: ' + message)
                  }
                  function reportSuccess(message) {
                    report(message)
                  }

                  document.addEventListener("DOMContentLoaded", main)

                  async function main() {
                    if (new URLSearchParams(window.location.search).get("token") === null) {
                      reportProblem("Failed to confirm email: token query parameter must be set")
                    }
                    try {
                      const response = await fetch(window.location.origin + window.location.pathname, {
                        method: "POST",
                        headers: {
                          "Content-Type": "application/json",
                        },
                        body: JSON.stringify({token: new URLSearchParams(window.location.search).get("token")}),
                      })
                      if (response.ok) {
                        reportSuccess("Successfuly confirmed email.")
                        const responseBody = await response.json()
                        console.log(responseBody)
                        return
                      }

                      const responseBody = await response.json()
                      if ('errors' in responseBody) {
                        reportProblem(JSON.stringify(responseBody.errors, null, 2))
                        return
                      }

                      console.error("Unknown upstream server error format", data)
                      throw new Error("Unknown upstream server error format")
                    } catch (err) {
                        console.error(err)
                        reportProblem("Could not confirm email (server internal error).")
                    }
                  }
                </script>
              </body>
            </html>

    post:
      summary: Confirm email via token
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.auth.email_confirmation.id}'
        service_account_id: '${containers.auth.email_confirmation.sa_id}'
  /api/v1/products:
    get:
      summary: List products
      description: List products
      tags:
        - products
      operationId: products_list
      parameters:
        - name: filter
          description: Filter, such as "seller.id=foo" or "seller.id=foo&name=bar&in_stock=*"
          in: query
          required: true
          schema:
            type: string
        - name: nextPageToken
          in: query
          schema:
            type: string
      responses:
        200:
          description: Products data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProductsRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.products.id}'
        service_account_id: '${containers.products.sa_id}'
    post:
      summary: 'Create product'
      description: ''
      tags:
        - products
      operationId: products_create
      security:
        - bearerAuth: []
      responses:
        200:
          description: Product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.products.id}'
        service_account_id: '${containers.products.sa_id}'
  /api/v1/products/{id}:
    get:
      summary: Get product
      description: |
        Example requestBody:
        ```
        GET /api/v1/products/{id}
        ```
      tags:
        - products
      operationId: products_get
      parameters:
        - name: id
          description: product id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.products.id}'
        service_account_id: '${containers.products.sa_id}'
    patch:
      summary: ''
      description: ''
      tags:
        - products
      operationId: products_update
      parameters:
        - name: id
          description: product id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.products.id}'
        service_account_id: '${containers.products.sa_id}'
    delete:
      summary: ''
      description: ''
      tags:
        - products
      operationId: products_delete
      parameters:
        - name: id
          description: product id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductRes'
        default:
          $ref: '#/components/responses/Error'
      x-yc-apigateway-validator:
        validateRequestBody: true
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: '${containers.products.id}'
        service_account_id: '${containers.products.sa_id}'

components:
  securitySchemes:
    # TODO: jwtHeaderAuth
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # Auth (Users/Email)
    CreateUserAccountReq:
      type: object
      required:
        - email
        - name
        - password
      properties:
        email:
          type: string
        name:
          type: string
        password:
          type: string
    CreateUserAccountRes:
      type: object
      required:
        - id
        - name
      properties:
        email:
          type: string
        name:
          type: string
    CreateSellerAccountReq:
      type: object
      required:
        - seller
        - access_token
      properties:
        seller:
          type: object
          required:
            - name
            - email
            - password
          properties:
            email:
              type: string
            name:
              type: string
            password:
              type: string
        access_token:
          type: string
    CreateSellerAccountRes:
      type: object
      required:
        - id
        - name
      properties:
        email:
          type: string
        name:
          type: string
    AuthenticateReq:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    AuthenticateRes:
      type: object
      required:
        - refresh_token
        - expires_at
      properties:
        refresh_token:
          type: string
        expires_at:
          type: string
    ReplaceRefreshTokenReq:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
    ReplaceRefreshTokenRes:
      type: object
      required:
        - refresh_token
        - expires_at
      properties:
        refresh_token:
          type: string
        expires_at:
          type: string
    CreateAccessTokenReq:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
    CreateAccessTokenRes:
      type: object
      required:
        - access_token
        - expires_at
      properties:
        access_token:
          type: string
        expires_at:
          type: string
    # Products
    ListProductsRes:
      type: object
      required:
        - products
        - next_page_token
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ListProductsResProduct'
        next_page_token:
          type: string
    ListProductsResProduct:
      type: object
      required:
        - id
        - name
        - seller_id
        - picture_url
      properties:
        id:
          type: string
        name:
          type: string
        seller_id:
          type: string
        picture_url:
          type: string
    GetProductRes:
      type: object
      required:
        - id
        - seller_id
        - name
        - description
        - stock
        - metadata
        - picture_urls
        - created_at
        - updated_at
      properties:
        id:
          type: string
        seller_id:
          type: string
        name:
          type: string
        description:
          type: string
        stock:
          type: integer
        metadata:
          type: object
        picture_urls:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    # Errors
    Err:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string

  responses:
    # Common
    Error:
      description: 'error'
      content:
        application/json:
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/Err'
