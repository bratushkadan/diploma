// Package oapi_codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi_codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Err defines model for Err.
type Err struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// PrivateFeedbackProcessCompletedOrderReq defines model for PrivateFeedbackProcessCompletedOrderReq.
type PrivateFeedbackProcessCompletedOrderReq struct {
	Messages []PrivateFeedbackProcessCompletedOrderReqMessage `json:"messages"`
}

// PrivateFeedbackProcessCompletedOrderReqMessage defines model for PrivateFeedbackProcessCompletedOrderReqMessage.
type PrivateFeedbackProcessCompletedOrderReqMessage struct {
	OrderId  string                                          `json:"order_id"`
	Products PrivateFeedbackProcessCompletedOrderReqProducts `json:"products"`
}

// PrivateFeedbackProcessCompletedOrderReqProducts defines model for PrivateFeedbackProcessCompletedOrderReqProducts.
type PrivateFeedbackProcessCompletedOrderReqProducts struct {
	Id string `json:"id"`
}

// PrivateFeedbackProcessCompletedOrderRes defines model for PrivateFeedbackProcessCompletedOrderRes.
type PrivateFeedbackProcessCompletedOrderRes = map[string]interface{}

// Error defines model for Error.
type Error struct {
	Errors []Err `json:"errors"`
}

// FeedbackProcessCompletedOrderJSONRequestBody defines body for FeedbackProcessCompletedOrder for application/json ContentType.
type FeedbackProcessCompletedOrderJSONRequestBody = PrivateFeedbackProcessCompletedOrderReq

// Method & Path constants for routes.
// Process completed order contents
const FeedbackProcessCompletedOrderMethod = "POST"
const FeedbackProcessCompletedOrderPath = "/api/private/v1/feedback/orders:process_completed_order"

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Process completed order contents
	// (POST /api/private/v1/feedback/orders:process_completed_order)
	FeedbackProcessCompletedOrder(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// FeedbackProcessCompletedOrder operation middleware
func (siw *ServerInterfaceWrapper) FeedbackProcessCompletedOrder(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FeedbackProcessCompletedOrder(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/private/v1/feedback/orders:process_completed_order", wrapper.FeedbackProcessCompletedOrder)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWTY/bNhD9KwLbQwtIK6e96bYNtkBQBDGSHAoUC2NMjS0mksgMR05cQ/+9GIqynbV2",
	"Iy+SnlZLvnnzZjgfPihtG2dbbNmr4qAIvbOtx/DPHZEl+dC2ZWxZPsG52mhgY9v8g7etnHldYQPhtiyN",
	"XEG9JOuQ2AjTBmqPqXJnRweFQh6+DGMTPn4m3KhC/ZSfNOUDt8/viFSfKt47VIUCItirvk8V4afOEJaq",
	"+GekvD/C7PoDala9AEv0mowTdaoYoIEgOojxXhmEtiXK3+jPtIxbDEIb9B6255eeybTbC9GB4oS/FJ+q",
	"JZkdMP6JWK5Bf1yS1ej9S9u4GhnLN1QivcVPV2qPHuc/wUwZr2Mk33qto/+LkFP1JWPYekG5wekKnFH3",
	"83Px+pT+K1JixXplyolXC9Cy0/y90rQc6R7m5egnVZ0f5KQnZT8iWcuzyK7I1mSeHgTzYxT7M8ffJJUe",
	"R92R4f07eaLBeo1ASLcdVyEUmQkVQomkUtVCI8x/Z3Jtyfwbxp061bMzf+F+GCum3digxnAtd3faNsnt",
	"8pVK1Q7JD9NmcfPiZiE1ZB22oqpQv98sbhYqVQ64CoJycCaPyvPdi1wDcaFrBMri+A2wL1nEZIGHqcM+",
	"nTZ23bo2vnqG+SamPw9l5ws3PMNKj++wChdC6KwPe+Hr8RrfLTkaJMEgGaUkv3ibcAWcSIknFfgEEofU",
	"GC8pS9gmNcIOk1FJsrEkkKFSf1UhlRTe5VWpCvVkwaihJtHzH7bcX7XQvkOjS52ErjjbrL8tFv+zDD+1",
	"BcfGT0pgUOF6A13Nj7k8xpDfnfZn1zRA+xmPLg0UO3R81tDz82oycBVrYF1lGlqNdda1DkyZDUU6v7oH",
	"psjxPOPYEFlsMSwz6bjMWR+G57P5CD3SDsvsfNnMIxotisjxDMuunWcbB0x+iPupz88Dn4HKD9GnHD80",
	"Yajt9uvDs2xMnD7BNgnJndHcEfprsPnhglzi8nkBHVfYsjQvTgK0bTeGmhU2YOohtXstWd0C42fYZzr+",
	"EG6QK1t6aaU3796HrW+2sppC8ieICYHxVkvpvLcfsZ12P6JsF0bNY4h3WNdIT+EIXQ0a3+KG0FdHj/2x",
	"rx+ugdtTamSqS20ZjacNK6lTfXp4bCxdGBwL4dLo5VA4lzZjRU2ZEE/hiSfAYY5OSIoD5NEoEsKdwc8T",
	"lsch2N/3/wUAAP//IdfwkIgNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
