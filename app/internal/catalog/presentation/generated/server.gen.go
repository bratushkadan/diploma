// Package oapi_codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi_codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// CatalogGetRes defines model for CatalogGetRes.
type CatalogGetRes struct {
	NextPageToken *string                `json:"next_page_token"`
	Products      []CatalogGetResProduct `json:"products"`
}

// CatalogGetResProduct defines model for CatalogGetResProduct.
type CatalogGetResProduct struct {
	Id   string `json:"id"`
	Name string `json:"name"`

	// Picture url
	Picture *string `json:"picture"`
	Price   float64 `json:"price"`
}

// Err defines model for Err.
type Err struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Error defines model for Error.
type Error struct {
	Errors []Err `json:"errors"`
}

// CatalogGetParams defines parameters for CatalogGet.
type CatalogGetParams struct {
	NextPageToken *string `form:"next_page_token,omitempty" json:"next_page_token,omitempty"`

	// Filter query search filter
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`
}

// Method & Path constants for routes.
// Query catalog
const CatalogGetMethod = "GET"
const CatalogGetPath = "/api/v1/catalog"

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Query catalog
	// (GET /api/v1/catalog)
	CatalogGet(c *gin.Context, params CatalogGetParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CatalogGet operation middleware
func (siw *ServerInterfaceWrapper) CatalogGet(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CatalogGetParams

	// ------------- Optional query parameter "next_page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "next_page_token", c.Request.URL.Query(), &params.NextPageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter next_page_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CatalogGet(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/catalog", wrapper.CatalogGet)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RVTW/jNhD9K8a0RyXy7gJNoVtaBMWih02TPRRYBMaYHNlMJJIZjrzrGv7vBakPO5aS",
	"jS8GTc7HmzdvRjtQrvbOkpUAxQ6Ygnc2UPpzw+w4HpSzQlbiEb2vjEIxzuaPwdl4F9SaakyvWpv4hNUt",
	"O08sJkYqsQqUgT+62gHF4OlkhOp0+JWphAJ+yQ+Y8jZ2yG+YYZ+BbD1BAciMW9jvM2B6bgyThuJbH/Jh",
	"MHPLR1IC+2ioKSg2PqKDojVNAboEMf+fKFi51V8kdy3GM8qx9EMWHle0EPdEiRbbVBUuK4JCuKEBVBA2",
	"dhWL8ex0o+T9JLwAeNt6/5SVIUs2AjlmKoPJHOdxYXT8HZVrsabJB2+UNJzeXnap4Sqi/jmPRiXv0nGN",
	"AgVo10SHwdY29ZJ4RI3R0MHqg0wxEqV3HgHK6eNKjRVaUdJvTSHgaoqGE2gpxMF+QtMZBFING9neR3m0",
	"mZeETHzdyDo1IpK4JtTEfaEF/HsRnx2b/9IUH0hCb/6mbTstxpYugTQSiYcb5erZ9e1nyGBDHNr2zC8/",
	"XM5jVc6TRW+ggE+X88t5ZBNlnQDl6E2++ZBjI+tCOVsari+oRlPF1x8XW3WB3qxQ6DtuL1S3EmqStdMB",
	"Crj9cv8VMnBsVrGaqICIrw+rWrVGnxUlncY+pMI+ayiO1JxAMdYkFHN869h5boi3B3JOJyQ7Wm6jhp3K",
	"NcWaBUJW61lpKkm0T6UZHl+P/pC9XMYf5/OzVvG798jUeuwMZhoFIb2W2FTyWtwBaH5z2KtNXSNvoYB/",
	"Ei19pzIQXIUk8e7mIRvpIE1M28a+aDSWeBFXC0TeiDdG0QKVco2V9h4f6YrMlX/6rfIf5+Xz71efyoO8",
	"owtxRSEshnghFneafIOV0Sjtp6/7Q3f03FCQP5ze9io8kuHRJp+4zXfdaWH0/h0mebcQwzm2+W4UvAnE",
	"IS/i6JGVKBWaNFBMKHStFIXwtft6vWEVCX/D4p6qivgtOyZfoaI7KpnCesi4H6RxOljXhwqMs7Ou+Ydx",
	"ihXCeB67r1cYOwz9Gjv10h/59HKdcmGZsmeZMP7CmngCkkv3r1cxY9oY+j7hWRLpJaon2D/s/w8AAP//",
	"qYcAINAJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
