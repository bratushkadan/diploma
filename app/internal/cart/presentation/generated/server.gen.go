// Package oapi_codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi_codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AuthenticateReq defines model for AuthenticateReq.
type AuthenticateReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthenticateRes defines model for AuthenticateRes.
type AuthenticateRes struct {
	ExpiresAt    string `json:"expires_at"`
	RefreshToken string `json:"refresh_token"`
}

// CartClearCartRes defines model for CartClearCartRes.
type CartClearCartRes = map[string]interface{}

// CartClearCartResPosition defines model for CartClearCartResPosition.
type CartClearCartResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartDeleteCartPositionRes defines model for CartDeleteCartPositionRes.
type CartDeleteCartPositionRes struct {
	DeletedPosition CartDeleteCartPositionResPosition `json:"deleted_position"`
}

// CartDeleteCartPositionResPosition defines model for CartDeleteCartPositionResPosition.
type CartDeleteCartPositionResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartGetCartPositionsRes defines model for CartGetCartPositionsRes.
type CartGetCartPositionsRes struct {
	Positions []CartGetCartPositionsResPosition `json:"positions"`
}

// CartGetCartPositionsResPosition defines model for CartGetCartPositionsResPosition.
type CartGetCartPositionsResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartSetCartPositionRes defines model for CartSetCartPositionRes.
type CartSetCartPositionRes struct {
	SetPosition CartSetCartPositionResPosition `json:"set_position"`
}

// CartSetCartPositionResPosition defines model for CartSetCartPositionResPosition.
type CartSetCartPositionResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CatalogGetRes defines model for CatalogGetRes.
type CatalogGetRes struct {
	NextPageToken *string                `json:"next_page_token"`
	Products      []CatalogGetResProduct `json:"products"`
}

// CatalogGetResProduct defines model for CatalogGetResProduct.
type CatalogGetResProduct struct {
	Id   string `json:"id"`
	Name string `json:"name"`

	// Picture url
	Picture *string `json:"picture"`
	Price   float64 `json:"price"`
}

// CreateAccessTokenReq defines model for CreateAccessTokenReq.
type CreateAccessTokenReq struct {
	RefreshToken string `json:"refresh_token"`
}

// CreateAccessTokenRes defines model for CreateAccessTokenRes.
type CreateAccessTokenRes struct {
	AccessToken string `json:"access_token"`
	ExpiresAt   string `json:"expires_at"`
}

// CreateProductReq defines model for CreateProductReq.
type CreateProductReq struct {
	Description string                 `json:"description"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Price       float64                `json:"price"`
	Stock       int                    `json:"stock"`
}

// CreateProductRes defines model for CreateProductRes.
type CreateProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	Price       float64                `json:"price"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// CreateSellerAccountReq defines model for CreateSellerAccountReq.
type CreateSellerAccountReq struct {
	AccessToken string `json:"access_token"`
	Seller      struct {
		Email    string `json:"email"`
		Name     string `json:"name"`
		Password string `json:"password"`
	} `json:"seller"`
}

// CreateSellerAccountRes defines model for CreateSellerAccountRes.
type CreateSellerAccountRes struct {
	Email *string `json:"email,omitempty"`
	Name  string  `json:"name"`
}

// CreateUserAccountReq defines model for CreateUserAccountReq.
type CreateUserAccountReq struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// CreateUserAccountRes defines model for CreateUserAccountRes.
type CreateUserAccountRes struct {
	Email *string `json:"email,omitempty"`
	Name  string  `json:"name"`
}

// DeleteProductPictureRes defines model for DeleteProductPictureRes.
type DeleteProductPictureRes struct {
	Id string `json:"id"`
}

// DeleteProductRes defines model for DeleteProductRes.
type DeleteProductRes struct {
	Id string `json:"id"`
}

// Err defines model for Err.
type Err struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FeedbackCreateProductReviewReq defines model for FeedbackCreateProductReviewReq.
type FeedbackCreateProductReviewReq struct {
	Rating float64 `json:"rating"`
	Review string  `json:"review"`
}

// FeedbackCreateProductReviewRes defines model for FeedbackCreateProductReviewRes.
type FeedbackCreateProductReviewRes struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	ProductId string  `json:"product_id"`
	Rating    float64 `json:"rating"`
	Review    string  `json:"review"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// FeedbackDeleteProductReviewRes defines model for FeedbackDeleteProductReviewRes.
type FeedbackDeleteProductReviewRes struct {
	Id string `json:"id"`
}

// FeedbackGetProductRatingRes defines model for FeedbackGetProductRatingRes.
type FeedbackGetProductRatingRes struct {
	ProductId string `json:"product_id"`
	Rating    int    `json:"rating"`
}

// FeedbackGetProductReviewRes defines model for FeedbackGetProductReviewRes.
type FeedbackGetProductReviewRes struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	ProductId string  `json:"product_id"`
	Rating    float64 `json:"rating"`
	Review    string  `json:"review"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// FeedbackListProductRatingsRes defines model for FeedbackListProductRatingsRes.
type FeedbackListProductRatingsRes struct {
	Ratings []FeedbackListProductRatingsResRating `json:"ratings"`
}

// FeedbackListProductRatingsResRating defines model for FeedbackListProductRatingsResRating.
type FeedbackListProductRatingsResRating struct {
	ProductId *string `json:"product_id,omitempty"`
	Rating    int     `json:"rating"`
}

// FeedbackListProductReviewsRes defines model for FeedbackListProductReviewsRes.
type FeedbackListProductReviewsRes struct {
	NextPageToken *string                               `json:"next_page_token"`
	Reviews       []FeedbackListProductReviewsResReview `json:"reviews"`
}

// FeedbackListProductReviewsResReview defines model for FeedbackListProductReviewsResReview.
type FeedbackListProductReviewsResReview struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	ProductId string  `json:"product_id"`
	Rating    float64 `json:"rating"`
	Review    string  `json:"review"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// FeedbackUpdateProductReviewReq defines model for FeedbackUpdateProductReviewReq.
type FeedbackUpdateProductReviewReq struct {
	Rating *float64 `json:"rating,omitempty"`
	Review *string  `json:"review,omitempty"`
}

// FeedbackUpdateProductReviewRes defines model for FeedbackUpdateProductReviewRes.
type FeedbackUpdateProductReviewRes struct {
	Id     string   `json:"id"`
	Rating *float64 `json:"rating,omitempty"`
	Review *string  `json:"review,omitempty"`
}

// GetProductRes defines model for GetProductRes.
type GetProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	Price       float64                `json:"price"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// GetProductResPicture defines model for GetProductResPicture.
type GetProductResPicture struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// GetProductResPictures defines model for GetProductResPictures.
type GetProductResPictures = []GetProductResPicture

// ListProductsRes defines model for ListProductsRes.
type ListProductsRes struct {
	NextPageToken *string                  `json:"next_page_token"`
	Products      []ListProductsResProduct `json:"products"`
}

// ListProductsResProduct defines model for ListProductsResProduct.
type ListProductsResProduct struct {
	Id         string  `json:"id"`
	Name       string  `json:"name"`
	PictureUrl string  `json:"picture_url"`
	Price      float64 `json:"price"`
	SellerId   string  `json:"seller_id"`
}

// OrdersCreateOrderRes defines model for OrdersCreateOrderRes.
type OrdersCreateOrderRes struct {
	Operation OrdersCreateOrderResOperation `json:"operation"`
}

// OrdersCreateOrderResOperation defines model for OrdersCreateOrderResOperation.
type OrdersCreateOrderResOperation struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	OrderId   *string `json:"order_id,omitempty"`
	Status    string  `json:"status"`
	Type      string  `json:"type"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// OrdersGetOperationRes defines model for OrdersGetOperationRes.
type OrdersGetOperationRes struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	OrderId   *string `json:"order_id,omitempty"`
	Status    string  `json:"status"`
	Type      string  `json:"type"`
	UpdatedAt string  `json:"updated_at"`
}

// OrdersGetOrderRes defines model for OrdersGetOrderRes.
type OrdersGetOrderRes struct {
	CreatedAt string                `json:"created_at"`
	Id        string                `json:"id"`
	Items     OrdersGetOrderResItem `json:"items"`
	Status    string                `json:"status"`
	UpdatedAt string                `json:"updated_at"`
	UserId    string                `json:"user_id"`
}

// OrdersGetOrderResItem defines model for OrdersGetOrderResItem.
type OrdersGetOrderResItem struct {
	Count      int     `json:"count"`
	Name       string  `json:"name"`
	PictureUrl *string `json:"picture_url,omitempty"`
	Price      float64 `json:"price"`
	ProductId  string  `json:"product_id"`
	SellerId   string  `json:"seller_id"`
}

// OrdersListOrdersRes defines model for OrdersListOrdersRes.
type OrdersListOrdersRes struct {
	NextPageToken *string                  `json:"next_page_token"`
	Orders        OrdersListOrdersResOrder `json:"orders"`
}

// OrdersListOrdersResItem defines model for OrdersListOrdersResItem.
type OrdersListOrdersResItem struct {
	Count      int     `json:"count"`
	Name       string  `json:"name"`
	PictureUrl *string `json:"picture_url,omitempty"`
	Price      float64 `json:"price"`
	ProductId  string  `json:"product_id"`
	SellerId   string  `json:"seller_id"`
}

// OrdersListOrdersResOrder defines model for OrdersListOrdersResOrder.
type OrdersListOrdersResOrder struct {
	CreatedAt *string                 `json:"created_at,omitempty"`
	Id        string                  `json:"id"`
	Items     OrdersListOrdersResItem `json:"items"`
	Status    string                  `json:"status"`
	UpdatedAt *string                 `json:"updated_at,omitempty"`
	UserId    string                  `json:"user_id"`
}

// OrdersUpdateOrderReq defines model for OrdersUpdateOrderReq.
type OrdersUpdateOrderReq struct {
	Status string `json:"status"`
}

// OrdersUpdateOrderRes defines model for OrdersUpdateOrderRes.
type OrdersUpdateOrderRes struct {
	Status    string `json:"status"`
	UpdatedAt string `json:"updated_at"`
}

// PrivateClearCartPositionsReq defines model for PrivateClearCartPositionsReq.
type PrivateClearCartPositionsReq struct {
	Messages []PrivateClearCartPositionsReqMessage `json:"messages"`
}

// PrivateClearCartPositionsReqMessage defines model for PrivateClearCartPositionsReqMessage.
type PrivateClearCartPositionsReqMessage struct {
	UserId string `json:"user_id"`
}

// PrivateClearCartPositionsRes defines model for PrivateClearCartPositionsRes.
type PrivateClearCartPositionsRes = map[string]interface{}

// PrivateFeedbackProcessCompletedOrderReq defines model for PrivateFeedbackProcessCompletedOrderReq.
type PrivateFeedbackProcessCompletedOrderReq struct {
	Messages []PrivateFeedbackProcessCompletedOrderReqMessage `json:"messages"`
}

// PrivateFeedbackProcessCompletedOrderReqMessage defines model for PrivateFeedbackProcessCompletedOrderReqMessage.
type PrivateFeedbackProcessCompletedOrderReqMessage struct {
	OrderId  string                                          `json:"order_id"`
	Products PrivateFeedbackProcessCompletedOrderReqProducts `json:"products"`
}

// PrivateFeedbackProcessCompletedOrderReqProducts defines model for PrivateFeedbackProcessCompletedOrderReqProducts.
type PrivateFeedbackProcessCompletedOrderReqProducts struct {
	Id string `json:"id"`
}

// PrivateFeedbackProcessCompletedOrderRes defines model for PrivateFeedbackProcessCompletedOrderRes.
type PrivateFeedbackProcessCompletedOrderRes = map[string]interface{}

// PrivateOrderBatchCancelUnpaidOrdersReq defines model for PrivateOrderBatchCancelUnpaidOrdersReq.
type PrivateOrderBatchCancelUnpaidOrdersReq = map[string]interface{}

// PrivateOrderBatchCancelUnpaidOrdersRes defines model for PrivateOrderBatchCancelUnpaidOrdersRes.
type PrivateOrderBatchCancelUnpaidOrdersRes = map[string]interface{}

// PrivateOrderCancelOperationsReq defines model for PrivateOrderCancelOperationsReq.
type PrivateOrderCancelOperationsReq struct {
	Messages []PrivateOrderCancelOperationsReqMessage `json:"messages"`
}

// PrivateOrderCancelOperationsReqMessage defines model for PrivateOrderCancelOperationsReqMessage.
type PrivateOrderCancelOperationsReqMessage struct {
	Details     string `json:"details"`
	OperationId string `json:"operation_id"`
}

// PrivateOrderCancelOperationsRes defines model for PrivateOrderCancelOperationsRes.
type PrivateOrderCancelOperationsRes = map[string]interface{}

// PrivateOrderProcessPublishedCartPositionsReq defines model for PrivateOrderProcessPublishedCartPositionsReq.
type PrivateOrderProcessPublishedCartPositionsReq struct {
	Messages []PrivateOrderProcessPublishedCartPositionsReqMessage `json:"messages"`
}

// PrivateOrderProcessPublishedCartPositionsReqCartPosition defines model for PrivateOrderProcessPublishedCartPositionsReqCartPosition.
type PrivateOrderProcessPublishedCartPositionsReqCartPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// PrivateOrderProcessPublishedCartPositionsReqMessage defines model for PrivateOrderProcessPublishedCartPositionsReqMessage.
type PrivateOrderProcessPublishedCartPositionsReqMessage struct {
	CartPositions []PrivateOrderProcessPublishedCartPositionsReqCartPosition `json:"cart_positions"`
	OperationId   string                                                     `json:"operation_id"`
}

// PrivateOrderProcessPublishedCartPositionsRes defines model for PrivateOrderProcessPublishedCartPositionsRes.
type PrivateOrderProcessPublishedCartPositionsRes = map[string]interface{}

// PrivateOrderProcessReservedProductsReq defines model for PrivateOrderProcessReservedProductsReq.
type PrivateOrderProcessReservedProductsReq struct {
	Messages []PrivateOrderProcessReservedProductsReqMessage `json:"messages"`
}

// PrivateOrderProcessReservedProductsReqMessage defines model for PrivateOrderProcessReservedProductsReqMessage.
type PrivateOrderProcessReservedProductsReqMessage struct {
	OperationId string                                          `json:"operation_id"`
	Products    []PrivateOrderProcessReservedProductsReqProduct `json:"products"`
}

// PrivateOrderProcessReservedProductsReqProduct defines model for PrivateOrderProcessReservedProductsReqProduct.
type PrivateOrderProcessReservedProductsReqProduct struct {
	Count    int     `json:"count"`
	Id       string  `json:"id"`
	Name     string  `json:"name"`
	Picture  *string `json:"picture,omitempty"`
	Price    float64 `json:"price"`
	SellerId string  `json:"seller_id"`
}

// PrivateOrderProcessReservedProductsRes defines model for PrivateOrderProcessReservedProductsRes.
type PrivateOrderProcessReservedProductsRes = map[string]interface{}

// PrivateOrderProcessUnreservedProductsReq defines model for PrivateOrderProcessUnreservedProductsReq.
type PrivateOrderProcessUnreservedProductsReq struct {
	Messages []PrivateOrderProcessUnreservedProductsReqMessage `json:"messages"`
}

// PrivateOrderProcessUnreservedProductsReqMessage defines model for PrivateOrderProcessUnreservedProductsReqMessage.
type PrivateOrderProcessUnreservedProductsReqMessage struct {
	OrderId string `json:"order_id"`
}

// PrivateOrderProcessUnreservedProductsRes defines model for PrivateOrderProcessUnreservedProductsRes.
type PrivateOrderProcessUnreservedProductsRes = map[string]interface{}

// PrivatePublishCartPositionsReq defines model for PrivatePublishCartPositionsReq.
type PrivatePublishCartPositionsReq struct {
	Messages []PrivatePublishCartPositionsReqMessage `json:"messages"`
}

// PrivatePublishCartPositionsReqMessage defines model for PrivatePublishCartPositionsReqMessage.
type PrivatePublishCartPositionsReqMessage struct {
	OperationId string `json:"operation_id"`
	UserId      string `json:"user_id"`
}

// PrivatePublishCartPositionsRes defines model for PrivatePublishCartPositionsRes.
type PrivatePublishCartPositionsRes = map[string]interface{}

// PrivateReserveProductsReq defines model for PrivateReserveProductsReq.
type PrivateReserveProductsReq struct {
	Messages []PrivateReserveProductsReqMessage `json:"messages"`
}

// PrivateReserveProductsReqMessage defines model for PrivateReserveProductsReqMessage.
type PrivateReserveProductsReqMessage struct {
	OperationId string                             `json:"operation_id"`
	Products    []PrivateReserveProductsReqProduct `json:"products"`
}

// PrivateReserveProductsReqProduct defines model for PrivateReserveProductsReqProduct.
type PrivateReserveProductsReqProduct struct {
	Count int    `json:"count"`
	Id    string `json:"id"`
}

// PrivateReserveProductsRes defines model for PrivateReserveProductsRes.
type PrivateReserveProductsRes = map[string]interface{}

// PrivateUnreserveProductsReq defines model for PrivateUnreserveProductsReq.
type PrivateUnreserveProductsReq struct {
	Messages []PrivateUnreserveProductsReqMessage `json:"messages"`
}

// PrivateUnreserveProductsReqMessage defines model for PrivateUnreserveProductsReqMessage.
type PrivateUnreserveProductsReqMessage struct {
	OrderId  string                             `json:"order_id"`
	Products []PrivateReserveProductsReqProduct `json:"products"`
}

// PrivateUnreserveProductsReqProduct defines model for PrivateUnreserveProductsReqProduct.
type PrivateUnreserveProductsReqProduct struct {
	Count int    `json:"count"`
	Id    string `json:"id"`
}

// PrivateUnreserveProductsRes defines model for PrivateUnreserveProductsRes.
type PrivateUnreserveProductsRes = map[string]interface{}

// ReplaceRefreshTokenReq defines model for ReplaceRefreshTokenReq.
type ReplaceRefreshTokenReq struct {
	RefreshToken string `json:"refresh_token"`
}

// ReplaceRefreshTokenRes defines model for ReplaceRefreshTokenRes.
type ReplaceRefreshTokenRes struct {
	ExpiresAt    string `json:"expires_at"`
	RefreshToken string `json:"refresh_token"`
}

// UpdateProductReq defines model for UpdateProductReq.
type UpdateProductReq struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Price       *float64                `json:"price,omitempty"`

	// StockDelta The amount of "in stock" product count change, either of:
	// - positive: stock amount is increased (seller releases more products)
	// - negative: stock amount is decreased (item purchased)
	StockDelta *int `json:"stock_delta,omitempty"`
}

// UpdateProductRes defines model for UpdateProductRes.
type UpdateProductRes struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Price       *float64                `json:"price,omitempty"`
	Stock       *int                    `json:"stock,omitempty"`
}

// UploadProductPictureRes defines model for UploadProductPictureRes.
type UploadProductPictureRes struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// Error defines model for Error.
type Error struct {
	Errors []Err `json:"errors"`
}

// CartSetCartPositionParams defines parameters for CartSetCartPosition.
type CartSetCartPositionParams struct {
	// Count product positions count
	Count int `form:"count" json:"count"`
}

// PrivateCartsClearContentsJSONRequestBody defines body for PrivateCartsClearContents for application/json ContentType.
type PrivateCartsClearContentsJSONRequestBody = PrivateClearCartPositionsReq

// PrivateCartPublishContentsJSONRequestBody defines body for PrivateCartPublishContents for application/json ContentType.
type PrivateCartPublishContentsJSONRequestBody = PrivatePublishCartPositionsReq

// Method & Path constants for routes.
// Clear carts contents
const PrivateCartsClearContentsMethod = "POST"
const PrivateCartsClearContentsPath = "/api/private/v1/cart/clear-contents"

// Publish carts contents
const PrivateCartPublishContentsMethod = "POST"
const PrivateCartPublishContentsPath = "/api/private/v1/cart/publish-contents"

// Clear cart
const CartClearCartMethod = "DELETE"
const CartClearCartPath = "/api/v1/cart/:user_id/positions"

// Get cart positions
const CartGetCartPositionsMethod = "GET"
const CartGetCartPositionsPath = "/api/v1/cart/:user_id/positions"

// Delete cart position
const CartDeleteCartPositionMethod = "DELETE"
const CartDeleteCartPositionPath = "/api/v1/cart/:user_id/positions/:product_id"

// Set cart position
const CartSetCartPositionMethod = "PUT"
const CartSetCartPositionPath = "/api/v1/cart/:user_id/positions/:product_id"

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Clear carts contents
	// (POST /api/private/v1/cart/clear-contents)
	PrivateCartsClearContents(c *gin.Context)
	// Publish carts contents
	// (POST /api/private/v1/cart/publish-contents)
	PrivateCartPublishContents(c *gin.Context)
	// Clear cart
	// (DELETE /api/v1/cart/{user_id}/positions)
	CartClearCart(c *gin.Context, userId string)
	// Get cart positions
	// (GET /api/v1/cart/{user_id}/positions)
	CartGetCartPositions(c *gin.Context, userId string)
	// Delete cart position
	// (DELETE /api/v1/cart/{user_id}/positions/{product_id})
	CartDeleteCartPosition(c *gin.Context, userId string, productId string)
	// Set cart position
	// (PUT /api/v1/cart/{user_id}/positions/{product_id})
	CartSetCartPosition(c *gin.Context, userId string, productId string, params CartSetCartPositionParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PrivateCartsClearContents operation middleware
func (siw *ServerInterfaceWrapper) PrivateCartsClearContents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PrivateCartsClearContents(c)
}

// PrivateCartPublishContents operation middleware
func (siw *ServerInterfaceWrapper) PrivateCartPublishContents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PrivateCartPublishContents(c)
}

// CartClearCart operation middleware
func (siw *ServerInterfaceWrapper) CartClearCart(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CartClearCart(c, userId)
}

// CartGetCartPositions operation middleware
func (siw *ServerInterfaceWrapper) CartGetCartPositions(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CartGetCartPositions(c, userId)
}

// CartDeleteCartPosition operation middleware
func (siw *ServerInterfaceWrapper) CartDeleteCartPosition(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CartDeleteCartPosition(c, userId, productId)
}

// CartSetCartPosition operation middleware
func (siw *ServerInterfaceWrapper) CartSetCartPosition(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CartSetCartPositionParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CartSetCartPosition(c, userId, productId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/private/v1/cart/clear-contents", wrapper.PrivateCartsClearContents)
	router.POST(options.BaseURL+"/api/private/v1/cart/publish-contents", wrapper.PrivateCartPublishContents)
	router.DELETE(options.BaseURL+"/api/v1/cart/:user_id/positions", wrapper.CartClearCart)
	router.GET(options.BaseURL+"/api/v1/cart/:user_id/positions", wrapper.CartGetCartPositions)
	router.DELETE(options.BaseURL+"/api/v1/cart/:user_id/positions/:product_id", wrapper.CartDeleteCartPosition)
	router.PUT(options.BaseURL+"/api/v1/cart/:user_id/positions/:product_id", wrapper.CartSetCartPosition)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
