// Package oapi_codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi_codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AuthenticateReq defines model for AuthenticateReq.
type AuthenticateReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthenticateRes defines model for AuthenticateRes.
type AuthenticateRes struct {
	ExpiresAt    string `json:"expires_at"`
	RefreshToken string `json:"refresh_token"`
}

// CartClearCartRes defines model for CartClearCartRes.
type CartClearCartRes struct {
	DeletedPositions []CartClearCartResPosition `json:"deleted_positions"`
}

// CartClearCartResPosition defines model for CartClearCartResPosition.
type CartClearCartResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartDeleteCartPositionRes defines model for CartDeleteCartPositionRes.
type CartDeleteCartPositionRes struct {
	DeletedPosition CartDeleteCartPositionResPosition `json:"deleted_position"`
}

// CartDeleteCartPositionResPosition defines model for CartDeleteCartPositionResPosition.
type CartDeleteCartPositionResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartGetCartPositionsRes defines model for CartGetCartPositionsRes.
type CartGetCartPositionsRes struct {
	Positions []CartGetCartPositionsResPosition `json:"positions"`
}

// CartGetCartPositionsResPosition defines model for CartGetCartPositionsResPosition.
type CartGetCartPositionsResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartSetCartPositionRes defines model for CartSetCartPositionRes.
type CartSetCartPositionRes struct {
	SetPosition CartSetCartPositionResPosition `json:"set_position"`
}

// CartSetCartPositionResPosition defines model for CartSetCartPositionResPosition.
type CartSetCartPositionResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CatalogGetRes defines model for CatalogGetRes.
type CatalogGetRes struct {
	NextPageToken *string                `json:"next_page_token"`
	Products      []CatalogGetResProduct `json:"products"`
}

// CatalogGetResProduct defines model for CatalogGetResProduct.
type CatalogGetResProduct struct {
	Id   string `json:"id"`
	Name string `json:"name"`

	// Picture url
	Picture *string `json:"picture"`
	Price   float64 `json:"price"`
}

// CreateAccessTokenReq defines model for CreateAccessTokenReq.
type CreateAccessTokenReq struct {
	RefreshToken string `json:"refresh_token"`
}

// CreateAccessTokenRes defines model for CreateAccessTokenRes.
type CreateAccessTokenRes struct {
	AccessToken string `json:"access_token"`
	ExpiresAt   string `json:"expires_at"`
}

// CreateProductReq defines model for CreateProductReq.
type CreateProductReq struct {
	Description string                 `json:"description"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Price       float64                `json:"price"`
	Stock       int                    `json:"stock"`
}

// CreateProductRes defines model for CreateProductRes.
type CreateProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	Price       float64                `json:"price"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// CreateSellerAccountReq defines model for CreateSellerAccountReq.
type CreateSellerAccountReq struct {
	AccessToken string `json:"access_token"`
	Seller      struct {
		Email    string `json:"email"`
		Name     string `json:"name"`
		Password string `json:"password"`
	} `json:"seller"`
}

// CreateSellerAccountRes defines model for CreateSellerAccountRes.
type CreateSellerAccountRes struct {
	Email *string `json:"email,omitempty"`
	Name  string  `json:"name"`
}

// CreateUserAccountReq defines model for CreateUserAccountReq.
type CreateUserAccountReq struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// CreateUserAccountRes defines model for CreateUserAccountRes.
type CreateUserAccountRes struct {
	Email *string `json:"email,omitempty"`
	Name  string  `json:"name"`
}

// DeleteProductPictureRes defines model for DeleteProductPictureRes.
type DeleteProductPictureRes struct {
	Id string `json:"id"`
}

// DeleteProductRes defines model for DeleteProductRes.
type DeleteProductRes struct {
	Id string `json:"id"`
}

// Err defines model for Err.
type Err struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetProductRes defines model for GetProductRes.
type GetProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	Price       float64                `json:"price"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// GetProductResPicture defines model for GetProductResPicture.
type GetProductResPicture struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// GetProductResPictures defines model for GetProductResPictures.
type GetProductResPictures = []GetProductResPicture

// ListProductsRes defines model for ListProductsRes.
type ListProductsRes struct {
	NextPageToken *string                  `json:"next_page_token"`
	Products      []ListProductsResProduct `json:"products"`
}

// ListProductsResProduct defines model for ListProductsResProduct.
type ListProductsResProduct struct {
	Id         string  `json:"id"`
	Name       string  `json:"name"`
	PictureUrl string  `json:"picture_url"`
	Price      float64 `json:"price"`
	SellerId   string  `json:"seller_id"`
}

// PrivateClearCartPositionsReq defines model for PrivateClearCartPositionsReq.
type PrivateClearCartPositionsReq struct {
	Messages []PrivateClearCartPositionsReqMessage `json:"messages"`
}

// PrivateClearCartPositionsReqMessage defines model for PrivateClearCartPositionsReqMessage.
type PrivateClearCartPositionsReqMessage struct {
	UserId string `json:"user_id"`
}

// PrivateClearCartPositionsRes defines model for PrivateClearCartPositionsRes.
type PrivateClearCartPositionsRes = map[string]interface{}

// PrivateFeedbackProcessCompletedOrderReq defines model for PrivateFeedbackProcessCompletedOrderReq.
type PrivateFeedbackProcessCompletedOrderReq struct {
	Messages []PrivateFeedbackProcessCompletedOrderReqMessage `json:"messages"`
}

// PrivateFeedbackProcessCompletedOrderReqMessage defines model for PrivateFeedbackProcessCompletedOrderReqMessage.
type PrivateFeedbackProcessCompletedOrderReqMessage struct {
	OrderId  string                                          `json:"order_id"`
	Products PrivateFeedbackProcessCompletedOrderReqProducts `json:"products"`
}

// PrivateFeedbackProcessCompletedOrderReqProducts defines model for PrivateFeedbackProcessCompletedOrderReqProducts.
type PrivateFeedbackProcessCompletedOrderReqProducts struct {
	Id string `json:"id"`
}

// PrivateFeedbackProcessCompletedOrderRes defines model for PrivateFeedbackProcessCompletedOrderRes.
type PrivateFeedbackProcessCompletedOrderRes = map[string]interface{}

// PrivateOrderBatchCancelUnpaidOrdersReq defines model for PrivateOrderBatchCancelUnpaidOrdersReq.
type PrivateOrderBatchCancelUnpaidOrdersReq = map[string]interface{}

// PrivateOrderBatchCancelUnpaidOrdersRes defines model for PrivateOrderBatchCancelUnpaidOrdersRes.
type PrivateOrderBatchCancelUnpaidOrdersRes = map[string]interface{}

// PrivateOrderCancelOrdersReq defines model for PrivateOrderCancelOrdersReq.
type PrivateOrderCancelOrdersReq struct {
	OrderId string `json:"order_id"`
}

// PrivateOrderCancelOrdersRes defines model for PrivateOrderCancelOrdersRes.
type PrivateOrderCancelOrdersRes = map[string]interface{}

// PrivateOrderProcessPublishedCartPositionsReq defines model for PrivateOrderProcessPublishedCartPositionsReq.
type PrivateOrderProcessPublishedCartPositionsReq struct {
	Messages []PrivateOrderProcessPublishedCartPositionsReqMessage `json:"messages"`
}

// PrivateOrderProcessPublishedCartPositionsReqCartPosition defines model for PrivateOrderProcessPublishedCartPositionsReqCartPosition.
type PrivateOrderProcessPublishedCartPositionsReqCartPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// PrivateOrderProcessPublishedCartPositionsReqMessage defines model for PrivateOrderProcessPublishedCartPositionsReqMessage.
type PrivateOrderProcessPublishedCartPositionsReqMessage struct {
	CartPositions PrivateOrderProcessPublishedCartPositionsReqCartPosition `json:"cart_positions"`
	OrderId       string                                                   `json:"order_id"`
}

// PrivateOrderProcessPublishedCartPositionsRes defines model for PrivateOrderProcessPublishedCartPositionsRes.
type PrivateOrderProcessPublishedCartPositionsRes = map[string]interface{}

// PrivateOrderProcessReservedProductsReq defines model for PrivateOrderProcessReservedProductsReq.
type PrivateOrderProcessReservedProductsReq struct {
	Messages []PrivateOrderProcessReservedProductsReqMessage `json:"messages"`
}

// PrivateOrderProcessReservedProductsReqMessage defines model for PrivateOrderProcessReservedProductsReqMessage.
type PrivateOrderProcessReservedProductsReqMessage struct {
	OrderId  string                                        `json:"order_id"`
	Products PrivateOrderProcessReservedProductsReqProduct `json:"products"`
}

// PrivateOrderProcessReservedProductsReqProduct defines model for PrivateOrderProcessReservedProductsReqProduct.
type PrivateOrderProcessReservedProductsReqProduct struct {
	Count    int     `json:"count"`
	Id       string  `json:"id"`
	Name     string  `json:"name"`
	Picture  *string `json:"picture,omitempty"`
	Price    float64 `json:"price"`
	SellerId string  `json:"seller_id"`
}

// PrivateOrderProcessReservedProductsRes defines model for PrivateOrderProcessReservedProductsRes.
type PrivateOrderProcessReservedProductsRes = map[string]interface{}

// PrivatePublishCartPositionsReq defines model for PrivatePublishCartPositionsReq.
type PrivatePublishCartPositionsReq struct {
	Messages []PrivatePublishCartPositionsReqItem `json:"messages"`
}

// PrivatePublishCartPositionsReqItem defines model for PrivatePublishCartPositionsReqItem.
type PrivatePublishCartPositionsReqItem struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// PrivatePublishCartPositionsReqMessage defines model for PrivatePublishCartPositionsReqMessage.
type PrivatePublishCartPositionsReqMessage struct {
	CartPositions PrivatePublishCartPositionsReqItem `json:"cart_positions"`
	OrderId       string                             `json:"order_id"`
}

// PrivatePublishCartPositionsRes defines model for PrivatePublishCartPositionsRes.
type PrivatePublishCartPositionsRes = map[string]interface{}

// PrivateReserveProductsReq defines model for PrivateReserveProductsReq.
type PrivateReserveProductsReq struct {
	Messages []PrivateReserveProductsReqMessage `json:"messages"`
}

// PrivateReserveProductsReqMessage defines model for PrivateReserveProductsReqMessage.
type PrivateReserveProductsReqMessage struct {
	OrderId  string                           `json:"order_id"`
	Products PrivateReserveProductsReqProduct `json:"products"`
}

// PrivateReserveProductsReqProduct defines model for PrivateReserveProductsReqProduct.
type PrivateReserveProductsReqProduct struct {
	Count int    `json:"count"`
	Id    string `json:"id"`
}

// PrivateReserveProductsRes defines model for PrivateReserveProductsRes.
type PrivateReserveProductsRes = map[string]interface{}

// PrivateUnreserveProductsReq defines model for PrivateUnreserveProductsReq.
type PrivateUnreserveProductsReq struct {
	Messages []PrivateUnreserveProductsReqMessage `json:"messages"`
}

// PrivateUnreserveProductsReqMessage defines model for PrivateUnreserveProductsReqMessage.
type PrivateUnreserveProductsReqMessage struct {
	OrderId  string                             `json:"order_id"`
	Products []PrivateReserveProductsReqProduct `json:"products"`
}

// PrivateUnreserveProductsReqProduct defines model for PrivateUnreserveProductsReqProduct.
type PrivateUnreserveProductsReqProduct struct {
	Count int    `json:"count"`
	Id    string `json:"id"`
}

// PrivateUnreserveProductsRes defines model for PrivateUnreserveProductsRes.
type PrivateUnreserveProductsRes = map[string]interface{}

// ReplaceRefreshTokenReq defines model for ReplaceRefreshTokenReq.
type ReplaceRefreshTokenReq struct {
	RefreshToken string `json:"refresh_token"`
}

// ReplaceRefreshTokenRes defines model for ReplaceRefreshTokenRes.
type ReplaceRefreshTokenRes struct {
	ExpiresAt    string `json:"expires_at"`
	RefreshToken string `json:"refresh_token"`
}

// UpdateProductReq defines model for UpdateProductReq.
type UpdateProductReq struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Price       *float64                `json:"price,omitempty"`

	// StockDelta The amount of "in stock" product count change, either of:
	// - positive: stock amount is increased (seller releases more products)
	// - negative: stock amount is decreased (item purchased)
	StockDelta *int `json:"stock_delta,omitempty"`
}

// UpdateProductRes defines model for UpdateProductRes.
type UpdateProductRes struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Price       *float64                `json:"price,omitempty"`
	Stock       *int                    `json:"stock,omitempty"`
}

// UploadProductPictureRes defines model for UploadProductPictureRes.
type UploadProductPictureRes struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// Error defines model for Error.
type Error struct {
	Errors []Err `json:"errors"`
}

// CartSetCartPositionParams defines parameters for CartSetCartPosition.
type CartSetCartPositionParams struct {
	// Count product positions count
	Count int `form:"count" json:"count"`
}

// CartsClearContentsJSONRequestBody defines body for CartsClearContents for application/json ContentType.
type CartsClearContentsJSONRequestBody = PrivateClearCartPositionsReq

// PrivateCartPublishContentsJSONRequestBody defines body for PrivateCartPublishContents for application/json ContentType.
type PrivateCartPublishContentsJSONRequestBody = PrivatePublishCartPositionsReq

// Method & Path constants for routes.
// Clear carts contents
const CartsClearContentsMethod = "POST"
const CartsClearContentsPath = "/api/private/v1/cart:clear-contents"

// Publish carts contents
const PrivateCartPublishContentsMethod = "POST"
const PrivateCartPublishContentsPath = "/api/private/v1/cart:publish-contents"

// Clear cart
const CartClearCartMethod = "DELETE"
const CartClearCartPath = "/api/v1/cart/:user_id/positions"

// Get cart positions
const CartGetCartPositionsMethod = "GET"
const CartGetCartPositionsPath = "/api/v1/cart/:user_id/positions"

// Delete cart position
const CartDeleteCartPositionMethod = "DELETE"
const CartDeleteCartPositionPath = "/api/v1/cart/:user_id/positions/:product_id"

// Set cart position
const CartSetCartPositionMethod = "PUT"
const CartSetCartPositionPath = "/api/v1/cart/:user_id/positions/:product_id"

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Clear carts contents
	// (POST /api/private/v1/cart:clear-contents)
	CartsClearContents(c *gin.Context)
	// Publish carts contents
	// (POST /api/private/v1/cart:publish-contents)
	PrivateCartPublishContents(c *gin.Context)
	// Clear cart
	// (DELETE /api/v1/cart/{user_id}/positions)
	CartClearCart(c *gin.Context, userId string)
	// Get cart positions
	// (GET /api/v1/cart/{user_id}/positions)
	CartGetCartPositions(c *gin.Context, userId string)
	// Delete cart position
	// (DELETE /api/v1/cart/{user_id}/positions/{product_id})
	CartDeleteCartPosition(c *gin.Context, userId string, productId string)
	// Set cart position
	// (PUT /api/v1/cart/{user_id}/positions/{product_id})
	CartSetCartPosition(c *gin.Context, userId string, productId string, params CartSetCartPositionParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CartsClearContents operation middleware
func (siw *ServerInterfaceWrapper) CartsClearContents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CartsClearContents(c)
}

// PrivateCartPublishContents operation middleware
func (siw *ServerInterfaceWrapper) PrivateCartPublishContents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PrivateCartPublishContents(c)
}

// CartClearCart operation middleware
func (siw *ServerInterfaceWrapper) CartClearCart(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CartClearCart(c, userId)
}

// CartGetCartPositions operation middleware
func (siw *ServerInterfaceWrapper) CartGetCartPositions(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CartGetCartPositions(c, userId)
}

// CartDeleteCartPosition operation middleware
func (siw *ServerInterfaceWrapper) CartDeleteCartPosition(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CartDeleteCartPosition(c, userId, productId)
}

// CartSetCartPosition operation middleware
func (siw *ServerInterfaceWrapper) CartSetCartPosition(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CartSetCartPositionParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CartSetCartPosition(c, userId, productId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/private/v1/cart:clear-contents", wrapper.CartsClearContents)
	router.POST(options.BaseURL+"/api/private/v1/cart:publish-contents", wrapper.PrivateCartPublishContents)
	router.DELETE(options.BaseURL+"/api/v1/cart/:user_id/positions", wrapper.CartClearCart)
	router.GET(options.BaseURL+"/api/v1/cart/:user_id/positions", wrapper.CartGetCartPositions)
	router.DELETE(options.BaseURL+"/api/v1/cart/:user_id/positions/:product_id", wrapper.CartDeleteCartPosition)
	router.PUT(options.BaseURL+"/api/v1/cart/:user_id/positions/:product_id", wrapper.CartSetCartPosition)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
