// Package oapi_codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi_codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CartClearCartRes defines model for CartClearCartRes.
type CartClearCartRes struct {
	DeletedPositions []CartClearCartResPosition `json:"deleted_positions"`
}

// CartClearCartResPosition defines model for CartClearCartResPosition.
type CartClearCartResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartDeleteCartPositionRes defines model for CartDeleteCartPositionRes.
type CartDeleteCartPositionRes struct {
	DeletedPosition CartDeleteCartPositionResPosition `json:"deleted_position"`
}

// CartDeleteCartPositionResPosition defines model for CartDeleteCartPositionResPosition.
type CartDeleteCartPositionResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartGetCartPositionsRes defines model for CartGetCartPositionsRes.
type CartGetCartPositionsRes struct {
	Positions []CartGetCartPositionsResPosition `json:"positions"`
}

// CartGetCartPositionsResPosition defines model for CartGetCartPositionsResPosition.
type CartGetCartPositionsResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartSetCartPositionRes defines model for CartSetCartPositionRes.
type CartSetCartPositionRes struct {
	SetPosition CartSetCartPositionResPosition `json:"set_position"`
}

// CartSetCartPositionResPosition defines model for CartSetCartPositionResPosition.
type CartSetCartPositionResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// Err defines model for Err.
type Err struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Error defines model for Error.
type Error struct {
	Errors []Err `json:"errors"`
}

// CartSetCartPositionParams defines parameters for CartSetCartPosition.
type CartSetCartPositionParams struct {
	// Count product positions count
	Count int `form:"count" json:"count"`
}

// Method & Path constants for routes.
// Clear cart
const CartClearCartMethod = "DELETE"
const CartClearCartPath = "/api/v1/cart/:user_id/positions"

// Get cart positions
const CartGetCartPositionsMethod = "GET"
const CartGetCartPositionsPath = "/api/v1/cart/:user_id/positions"

// Delete cart position
const CartDeleteCartPositionMethod = "DELETE"
const CartDeleteCartPositionPath = "/api/v1/cart/:user_id/positions/:product_id"

// Set cart position
const CartSetCartPositionMethod = "PUT"
const CartSetCartPositionPath = "/api/v1/cart/:user_id/positions/:product_id"

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Clear cart
	// (DELETE /api/v1/cart/{user_id}/positions)
	CartClearCart(c *gin.Context, userId string)
	// Get cart positions
	// (GET /api/v1/cart/{user_id}/positions)
	CartGetCartPositions(c *gin.Context, userId string)
	// Delete cart position
	// (DELETE /api/v1/cart/{user_id}/positions/{product_id})
	CartDeleteCartPosition(c *gin.Context, userId string, productId string)
	// Set cart position
	// (PUT /api/v1/cart/{user_id}/positions/{product_id})
	CartSetCartPosition(c *gin.Context, userId string, productId string, params CartSetCartPositionParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CartClearCart operation middleware
func (siw *ServerInterfaceWrapper) CartClearCart(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CartClearCart(c, userId)
}

// CartGetCartPositions operation middleware
func (siw *ServerInterfaceWrapper) CartGetCartPositions(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CartGetCartPositions(c, userId)
}

// CartDeleteCartPosition operation middleware
func (siw *ServerInterfaceWrapper) CartDeleteCartPosition(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CartDeleteCartPosition(c, userId, productId)
}

// CartSetCartPosition operation middleware
func (siw *ServerInterfaceWrapper) CartSetCartPosition(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CartSetCartPositionParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CartSetCartPosition(c, userId, productId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/api/v1/cart/:user_id/positions", wrapper.CartClearCart)
	router.GET(options.BaseURL+"/api/v1/cart/:user_id/positions", wrapper.CartGetCartPositions)
	router.DELETE(options.BaseURL+"/api/v1/cart/:user_id/positions/:product_id", wrapper.CartDeleteCartPosition)
	router.PUT(options.BaseURL+"/api/v1/cart/:user_id/positions/:product_id", wrapper.CartSetCartPosition)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYX2/bNhD/Ksatj4rlbG96y7KgKPbQIO7DgMAwGOpss5VE5nhy5xn67gMp2bIlqo42",
	"ZGizN5o83u/+/I538h6kzo0usGALyR4IrdGFRf/jjkiTW0hdMBbslsKYTEnBShfxZ6sLt2flBnPhT9NU",
	"uSOR3ZM2SKycppXILEZgTrb2gE65XynG3C/eEa4ggZ/i1qa41m3jOyKoIuCdQUhAEIkdVFUEhM+lIkwh",
	"eTyoXBzF9NNnlAyVE0zRSlLGWQdJLeoVNAAO/1YQ32YoyC0eajNHeJRihozp0mjrr7zcuS7wfaPhosd9",
	"yL7zEQyqH+ef1GXNgQZAFYxr9GkxpNNS8lKlJ+eWSRXrns0nslGjc8jo37x7bnUw+d9n5SW5COK2SbmQ",
	"hHHu/DDJeI98arodn4p/VhgB3BfXx+W6+Jb27z0j83PbxyfEIo+qiz7gYFGcqX65Az9E7F0vGmtfimHz",
	"crRWrPGybV5FKx9ochFYlCUp3s1dzmrkJxSEdFPyxhed630bFCkSRFCI3Cn448oda1J/+bYObU0Z9Tvu",
	"6vapipX2RirO3Nmd1Pnk5v4DRLBFsnVXnU2vpzPnlTZYCKMggV+ms+kMIjCCN96gWBgVb69jKYjjfWmR",
	"liqt4rO3oX5R3coF0Vv1IYXkvJF5pSRyZHRzxOO+0+Kd6onPpPfaGdD63ODCaYyZSoxOhpluPhbR+Xj0",
	"82w2ajgaMwGEZhZ/PnFxA3+2EmXGQ4qPlsZ37ajT0MMH65QYjwvnnC3zXNDuHCkCFmvrCeh+LiL482on",
	"r4RRa8H4VeyuPJnrJB3CIVRRhzeBd/vjhp06FVOVVuBsoa2SuBTS19mQsBXLWv6QDKQtUobWLltRF46u",
	"VVuRqVRwPb82P/ABn0u0/KtOd3W6XVTWyGGmdVvDmyNcqKOHeCeIJ219vjL33iN75p0gvnUOVtHFVzHe",
	"t72puvRE9ufM/5y6URehMX8Q5Kz1fj8lEv4CCRRJLXjO3NculSDm23+wTTnwYHfGyTdL+kGc43MxqYfX",
	"BvS5RNq1qIezYcBcFSovc0iuo97I+uolF/iqCdTbvNsmXrvY+oD/q7bEItNrSPYnmw3rbHi327EuicRG",
	"SS4J7RjZeN9T7grXxokoeYMFOxpiUEDqYqUoX2IuVOYi0Q2TbP6ezJE3OrWQwP3H+SeIQJNau7o6vEdd",
	"xYSC8UZKtPaT/oJFGP4g1Xy5DknMMcuQviVHaDIh8QFXhHZzRKyO9Oy+FjdtaJQuJg3d2vfBhQ76j8x9",
	"k4n+hSMR+pdua+L07xwYFbpCHJL3nz1d4Y+UIgVM0n5/2IsJ4Vbh18DNFWL6JOQXqBbV3wEAAP//7aX5",
	"xh4XAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
