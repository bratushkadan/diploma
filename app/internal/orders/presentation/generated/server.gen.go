// Package oapi_codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi_codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AuthenticateReq defines model for AuthenticateReq.
type AuthenticateReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthenticateRes defines model for AuthenticateRes.
type AuthenticateRes struct {
	ExpiresAt    string `json:"expires_at"`
	RefreshToken string `json:"refresh_token"`
}

// CartClearCartRes defines model for CartClearCartRes.
type CartClearCartRes = map[string]interface{}

// CartClearCartResPosition defines model for CartClearCartResPosition.
type CartClearCartResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartDeleteCartPositionRes defines model for CartDeleteCartPositionRes.
type CartDeleteCartPositionRes struct {
	DeletedPosition CartDeleteCartPositionResPosition `json:"deleted_position"`
}

// CartDeleteCartPositionResPosition defines model for CartDeleteCartPositionResPosition.
type CartDeleteCartPositionResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartGetCartPositionsRes defines model for CartGetCartPositionsRes.
type CartGetCartPositionsRes struct {
	Positions []CartGetCartPositionsResPosition `json:"positions"`
}

// CartGetCartPositionsResPosition defines model for CartGetCartPositionsResPosition.
type CartGetCartPositionsResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartSetCartPositionRes defines model for CartSetCartPositionRes.
type CartSetCartPositionRes struct {
	SetPosition CartSetCartPositionResPosition `json:"set_position"`
}

// CartSetCartPositionResPosition defines model for CartSetCartPositionResPosition.
type CartSetCartPositionResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CatalogGetRes defines model for CatalogGetRes.
type CatalogGetRes struct {
	NextPageToken *string                `json:"next_page_token"`
	Products      []CatalogGetResProduct `json:"products"`
}

// CatalogGetResProduct defines model for CatalogGetResProduct.
type CatalogGetResProduct struct {
	Id   string `json:"id"`
	Name string `json:"name"`

	// Picture url
	Picture *string `json:"picture"`
	Price   float64 `json:"price"`
}

// CreateAccessTokenReq defines model for CreateAccessTokenReq.
type CreateAccessTokenReq struct {
	RefreshToken string `json:"refresh_token"`
}

// CreateAccessTokenRes defines model for CreateAccessTokenRes.
type CreateAccessTokenRes struct {
	AccessToken string `json:"access_token"`
	ExpiresAt   string `json:"expires_at"`
}

// CreateProductReq defines model for CreateProductReq.
type CreateProductReq struct {
	Description string                 `json:"description"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Price       float64                `json:"price"`
	Stock       int                    `json:"stock"`
}

// CreateProductRes defines model for CreateProductRes.
type CreateProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	Price       float64                `json:"price"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// CreateSellerAccountReq defines model for CreateSellerAccountReq.
type CreateSellerAccountReq struct {
	AccessToken string `json:"access_token"`
	Seller      struct {
		Email    string `json:"email"`
		Name     string `json:"name"`
		Password string `json:"password"`
	} `json:"seller"`
}

// CreateSellerAccountRes defines model for CreateSellerAccountRes.
type CreateSellerAccountRes struct {
	Email *string `json:"email,omitempty"`
	Name  string  `json:"name"`
}

// CreateUserAccountReq defines model for CreateUserAccountReq.
type CreateUserAccountReq struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// CreateUserAccountRes defines model for CreateUserAccountRes.
type CreateUserAccountRes struct {
	Email *string `json:"email,omitempty"`
	Name  string  `json:"name"`
}

// DeleteProductPictureRes defines model for DeleteProductPictureRes.
type DeleteProductPictureRes struct {
	Id string `json:"id"`
}

// DeleteProductRes defines model for DeleteProductRes.
type DeleteProductRes struct {
	Id string `json:"id"`
}

// Err defines model for Err.
type Err struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FeedbackCreateProductReviewReq defines model for FeedbackCreateProductReviewReq.
type FeedbackCreateProductReviewReq struct {
	Rating float64 `json:"rating"`
	Review string  `json:"review"`
}

// FeedbackCreateProductReviewRes defines model for FeedbackCreateProductReviewRes.
type FeedbackCreateProductReviewRes struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	ProductId string  `json:"product_id"`
	Rating    float64 `json:"rating"`
	Review    string  `json:"review"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// FeedbackDeleteProductReviewRes defines model for FeedbackDeleteProductReviewRes.
type FeedbackDeleteProductReviewRes struct {
	Id string `json:"id"`
}

// FeedbackGetProductRatingRes defines model for FeedbackGetProductRatingRes.
type FeedbackGetProductRatingRes struct {
	ProductId string `json:"product_id"`
	Rating    int    `json:"rating"`
}

// FeedbackGetProductReviewRes defines model for FeedbackGetProductReviewRes.
type FeedbackGetProductReviewRes struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	ProductId string  `json:"product_id"`
	Rating    float64 `json:"rating"`
	Review    string  `json:"review"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// FeedbackListProductRatingsRes defines model for FeedbackListProductRatingsRes.
type FeedbackListProductRatingsRes struct {
	Ratings []FeedbackListProductRatingsResRating `json:"ratings"`
}

// FeedbackListProductRatingsResRating defines model for FeedbackListProductRatingsResRating.
type FeedbackListProductRatingsResRating struct {
	ProductId *string `json:"product_id,omitempty"`
	Rating    int     `json:"rating"`
}

// FeedbackListProductReviewsRes defines model for FeedbackListProductReviewsRes.
type FeedbackListProductReviewsRes struct {
	NextPageToken *string                               `json:"next_page_token"`
	Reviews       []FeedbackListProductReviewsResReview `json:"reviews"`
}

// FeedbackListProductReviewsResReview defines model for FeedbackListProductReviewsResReview.
type FeedbackListProductReviewsResReview struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	ProductId string  `json:"product_id"`
	Rating    float64 `json:"rating"`
	Review    string  `json:"review"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// FeedbackUpdateProductReviewReq defines model for FeedbackUpdateProductReviewReq.
type FeedbackUpdateProductReviewReq struct {
	Rating *float64 `json:"rating,omitempty"`
	Review *string  `json:"review,omitempty"`
}

// FeedbackUpdateProductReviewRes defines model for FeedbackUpdateProductReviewRes.
type FeedbackUpdateProductReviewRes struct {
	Id     string   `json:"id"`
	Rating *float64 `json:"rating,omitempty"`
	Review *string  `json:"review,omitempty"`
}

// GetProductRes defines model for GetProductRes.
type GetProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	Price       float64                `json:"price"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// GetProductResPicture defines model for GetProductResPicture.
type GetProductResPicture struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// GetProductResPictures defines model for GetProductResPictures.
type GetProductResPictures = []GetProductResPicture

// ListProductsRes defines model for ListProductsRes.
type ListProductsRes struct {
	NextPageToken *string                  `json:"next_page_token"`
	Products      []ListProductsResProduct `json:"products"`
}

// ListProductsResProduct defines model for ListProductsResProduct.
type ListProductsResProduct struct {
	Id         string  `json:"id"`
	Name       string  `json:"name"`
	PictureUrl string  `json:"picture_url"`
	Price      float64 `json:"price"`
	SellerId   string  `json:"seller_id"`
}

// OrdersCreateOrderRes defines model for OrdersCreateOrderRes.
type OrdersCreateOrderRes struct {
	Operation OrdersCreateOrderResOperation `json:"operation"`
}

// OrdersCreateOrderResOperation defines model for OrdersCreateOrderResOperation.
type OrdersCreateOrderResOperation struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	OrderId   *string `json:"order_id,omitempty"`
	Status    string  `json:"status"`
	Type      string  `json:"type"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// OrdersGetOperationRes defines model for OrdersGetOperationRes.
type OrdersGetOperationRes struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	OrderId   *string `json:"order_id,omitempty"`
	Status    string  `json:"status"`
	Type      string  `json:"type"`
	UpdatedAt string  `json:"updated_at"`
}

// OrdersGetOrderRes defines model for OrdersGetOrderRes.
type OrdersGetOrderRes struct {
	CreatedAt string                `json:"created_at"`
	Id        string                `json:"id"`
	Items     OrdersGetOrderResItem `json:"items"`
	Status    string                `json:"status"`
	UpdatedAt string                `json:"updated_at"`
	UserId    string                `json:"user_id"`
}

// OrdersGetOrderResItem defines model for OrdersGetOrderResItem.
type OrdersGetOrderResItem struct {
	Count      int     `json:"count"`
	Name       string  `json:"name"`
	PictureUrl *string `json:"picture_url,omitempty"`
	Price      float64 `json:"price"`
	ProductId  string  `json:"product_id"`
	SellerId   string  `json:"seller_id"`
}

// OrdersListOrdersRes defines model for OrdersListOrdersRes.
type OrdersListOrdersRes struct {
	NextPageToken *string                    `json:"next_page_token"`
	Orders        []OrdersListOrdersResOrder `json:"orders"`
}

// OrdersListOrdersResItem defines model for OrdersListOrdersResItem.
type OrdersListOrdersResItem struct {
	Count      int     `json:"count"`
	Name       string  `json:"name"`
	PictureUrl *string `json:"picture_url,omitempty"`
	Price      float64 `json:"price"`
	ProductId  string  `json:"product_id"`
	SellerId   string  `json:"seller_id"`
}

// OrdersListOrdersResOrder defines model for OrdersListOrdersResOrder.
type OrdersListOrdersResOrder struct {
	CreatedAt *string                 `json:"created_at,omitempty"`
	Id        string                  `json:"id"`
	Items     OrdersListOrdersResItem `json:"items"`
	Status    string                  `json:"status"`
	UpdatedAt *string                 `json:"updated_at,omitempty"`
	UserId    string                  `json:"user_id"`
}

// OrdersUpdateOrderReq defines model for OrdersUpdateOrderReq.
type OrdersUpdateOrderReq struct {
	Status string `json:"status"`
}

// OrdersUpdateOrderRes defines model for OrdersUpdateOrderRes.
type OrdersUpdateOrderRes struct {
	Status    string `json:"status"`
	UpdatedAt string `json:"updated_at"`
}

// PrivateClearCartPositionsReq defines model for PrivateClearCartPositionsReq.
type PrivateClearCartPositionsReq struct {
	Messages []PrivateClearCartPositionsReqMessage `json:"messages"`
}

// PrivateClearCartPositionsReqMessage defines model for PrivateClearCartPositionsReqMessage.
type PrivateClearCartPositionsReqMessage struct {
	UserId string `json:"user_id"`
}

// PrivateClearCartPositionsRes defines model for PrivateClearCartPositionsRes.
type PrivateClearCartPositionsRes = map[string]interface{}

// PrivateFeedbackProcessCompletedOrderReq defines model for PrivateFeedbackProcessCompletedOrderReq.
type PrivateFeedbackProcessCompletedOrderReq struct {
	Messages []PrivateFeedbackProcessCompletedOrderReqMessage `json:"messages"`
}

// PrivateFeedbackProcessCompletedOrderReqMessage defines model for PrivateFeedbackProcessCompletedOrderReqMessage.
type PrivateFeedbackProcessCompletedOrderReqMessage struct {
	OrderId  string                                          `json:"order_id"`
	Products PrivateFeedbackProcessCompletedOrderReqProducts `json:"products"`
}

// PrivateFeedbackProcessCompletedOrderReqProducts defines model for PrivateFeedbackProcessCompletedOrderReqProducts.
type PrivateFeedbackProcessCompletedOrderReqProducts struct {
	Id string `json:"id"`
}

// PrivateFeedbackProcessCompletedOrderRes defines model for PrivateFeedbackProcessCompletedOrderRes.
type PrivateFeedbackProcessCompletedOrderRes = map[string]interface{}

// PrivateOrderBatchCancelUnpaidOrdersReq defines model for PrivateOrderBatchCancelUnpaidOrdersReq.
type PrivateOrderBatchCancelUnpaidOrdersReq = map[string]interface{}

// PrivateOrderBatchCancelUnpaidOrdersRes defines model for PrivateOrderBatchCancelUnpaidOrdersRes.
type PrivateOrderBatchCancelUnpaidOrdersRes = map[string]interface{}

// PrivateOrderCancelOperationsReq defines model for PrivateOrderCancelOperationsReq.
type PrivateOrderCancelOperationsReq struct {
	Messages []PrivateOrderCancelOperationsReqMessage `json:"messages"`
}

// PrivateOrderCancelOperationsReqMessage defines model for PrivateOrderCancelOperationsReqMessage.
type PrivateOrderCancelOperationsReqMessage struct {
	Details     string `json:"details"`
	OperationId string `json:"operation_id"`
}

// PrivateOrderCancelOperationsRes defines model for PrivateOrderCancelOperationsRes.
type PrivateOrderCancelOperationsRes = map[string]interface{}

// PrivateOrderProcessPublishedCartPositionsReq defines model for PrivateOrderProcessPublishedCartPositionsReq.
type PrivateOrderProcessPublishedCartPositionsReq struct {
	Messages []PrivateOrderProcessPublishedCartPositionsReqMessage `json:"messages"`
}

// PrivateOrderProcessPublishedCartPositionsReqCartPosition defines model for PrivateOrderProcessPublishedCartPositionsReqCartPosition.
type PrivateOrderProcessPublishedCartPositionsReqCartPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// PrivateOrderProcessPublishedCartPositionsReqMessage defines model for PrivateOrderProcessPublishedCartPositionsReqMessage.
type PrivateOrderProcessPublishedCartPositionsReqMessage struct {
	CartPositions []PrivateOrderProcessPublishedCartPositionsReqCartPosition `json:"cart_positions"`
	OperationId   string                                                     `json:"operation_id"`
}

// PrivateOrderProcessPublishedCartPositionsRes defines model for PrivateOrderProcessPublishedCartPositionsRes.
type PrivateOrderProcessPublishedCartPositionsRes = map[string]interface{}

// PrivateOrderProcessReservedProductsReq defines model for PrivateOrderProcessReservedProductsReq.
type PrivateOrderProcessReservedProductsReq struct {
	Messages []PrivateOrderProcessReservedProductsReqMessage `json:"messages"`
}

// PrivateOrderProcessReservedProductsReqMessage defines model for PrivateOrderProcessReservedProductsReqMessage.
type PrivateOrderProcessReservedProductsReqMessage struct {
	OperationId string                                          `json:"operation_id"`
	Products    []PrivateOrderProcessReservedProductsReqProduct `json:"products"`
}

// PrivateOrderProcessReservedProductsReqProduct defines model for PrivateOrderProcessReservedProductsReqProduct.
type PrivateOrderProcessReservedProductsReqProduct struct {
	Count    int     `json:"count"`
	Id       string  `json:"id"`
	Name     string  `json:"name"`
	Picture  *string `json:"picture,omitempty"`
	Price    float64 `json:"price"`
	SellerId string  `json:"seller_id"`
}

// PrivateOrderProcessReservedProductsRes defines model for PrivateOrderProcessReservedProductsRes.
type PrivateOrderProcessReservedProductsRes = map[string]interface{}

// PrivateOrderProcessUnreservedProductsReq defines model for PrivateOrderProcessUnreservedProductsReq.
type PrivateOrderProcessUnreservedProductsReq struct {
	Messages []PrivateOrderProcessUnreservedProductsReqMessage `json:"messages"`
}

// PrivateOrderProcessUnreservedProductsReqMessage defines model for PrivateOrderProcessUnreservedProductsReqMessage.
type PrivateOrderProcessUnreservedProductsReqMessage struct {
	OrderId string `json:"order_id"`
}

// PrivateOrderProcessUnreservedProductsRes defines model for PrivateOrderProcessUnreservedProductsRes.
type PrivateOrderProcessUnreservedProductsRes = map[string]interface{}

// PrivatePublishCartPositionsReq defines model for PrivatePublishCartPositionsReq.
type PrivatePublishCartPositionsReq struct {
	Messages []PrivatePublishCartPositionsReqMessage `json:"messages"`
}

// PrivatePublishCartPositionsReqMessage defines model for PrivatePublishCartPositionsReqMessage.
type PrivatePublishCartPositionsReqMessage struct {
	OperationId string `json:"operation_id"`
	UserId      string `json:"user_id"`
}

// PrivatePublishCartPositionsRes defines model for PrivatePublishCartPositionsRes.
type PrivatePublishCartPositionsRes = map[string]interface{}

// PrivateReserveProductsReq defines model for PrivateReserveProductsReq.
type PrivateReserveProductsReq struct {
	Messages []PrivateReserveProductsReqMessage `json:"messages"`
}

// PrivateReserveProductsReqMessage defines model for PrivateReserveProductsReqMessage.
type PrivateReserveProductsReqMessage struct {
	OperationId string                             `json:"operation_id"`
	Products    []PrivateReserveProductsReqProduct `json:"products"`
}

// PrivateReserveProductsReqProduct defines model for PrivateReserveProductsReqProduct.
type PrivateReserveProductsReqProduct struct {
	Count int    `json:"count"`
	Id    string `json:"id"`
}

// PrivateReserveProductsRes defines model for PrivateReserveProductsRes.
type PrivateReserveProductsRes = map[string]interface{}

// PrivateUnreserveProductsReq defines model for PrivateUnreserveProductsReq.
type PrivateUnreserveProductsReq struct {
	Messages []PrivateUnreserveProductsReqMessage `json:"messages"`
}

// PrivateUnreserveProductsReqMessage defines model for PrivateUnreserveProductsReqMessage.
type PrivateUnreserveProductsReqMessage struct {
	OrderId  string                             `json:"order_id"`
	Products []PrivateReserveProductsReqProduct `json:"products"`
}

// PrivateUnreserveProductsReqProduct defines model for PrivateUnreserveProductsReqProduct.
type PrivateUnreserveProductsReqProduct struct {
	Count int    `json:"count"`
	Id    string `json:"id"`
}

// PrivateUnreserveProductsRes defines model for PrivateUnreserveProductsRes.
type PrivateUnreserveProductsRes = map[string]interface{}

// ReplaceRefreshTokenReq defines model for ReplaceRefreshTokenReq.
type ReplaceRefreshTokenReq struct {
	RefreshToken string `json:"refresh_token"`
}

// ReplaceRefreshTokenRes defines model for ReplaceRefreshTokenRes.
type ReplaceRefreshTokenRes struct {
	ExpiresAt    string `json:"expires_at"`
	RefreshToken string `json:"refresh_token"`
}

// UpdateProductReq defines model for UpdateProductReq.
type UpdateProductReq struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Price       *float64                `json:"price,omitempty"`

	// StockDelta The amount of "in stock" product count change, either of:
	// - positive: stock amount is increased (seller releases more products)
	// - negative: stock amount is decreased (item purchased)
	StockDelta *int `json:"stock_delta,omitempty"`
}

// UpdateProductRes defines model for UpdateProductRes.
type UpdateProductRes struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Price       *float64                `json:"price,omitempty"`
	Stock       *int                    `json:"stock,omitempty"`
}

// UploadProductPictureRes defines model for UploadProductPictureRes.
type UploadProductPictureRes struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// Error defines model for Error.
type Error struct {
	Errors []Err `json:"errors"`
}

// OrdersListOrdersParams defines parameters for OrdersListOrders.
type OrdersListOrdersParams struct {
	UserId        string  `form:"user_id" json:"user_id"`
	NextPageToken *string `form:"next_page_token,omitempty" json:"next_page_token,omitempty"`
}

// PrivateOrdersBatchCancelUnpaidOrdersJSONRequestBody defines body for PrivateOrdersBatchCancelUnpaidOrders for application/json ContentType.
type PrivateOrdersBatchCancelUnpaidOrdersJSONRequestBody = PrivateOrderBatchCancelUnpaidOrdersReq

// PrivateOrdersCancelOperationsJSONRequestBody defines body for PrivateOrdersCancelOperations for application/json ContentType.
type PrivateOrdersCancelOperationsJSONRequestBody = PrivateOrderCancelOperationsReq

// PrivateOrdersProcessPublishedCartPositionsJSONRequestBody defines body for PrivateOrdersProcessPublishedCartPositions for application/json ContentType.
type PrivateOrdersProcessPublishedCartPositionsJSONRequestBody = PrivateOrderProcessPublishedCartPositionsReq

// PrivateOrdersProcessReservedProductsJSONRequestBody defines body for PrivateOrdersProcessReservedProducts for application/json ContentType.
type PrivateOrdersProcessReservedProductsJSONRequestBody = PrivateOrderProcessReservedProductsReq

// PrivateOrdersProcessUnreservedProductsJSONRequestBody defines body for PrivateOrdersProcessUnreservedProducts for application/json ContentType.
type PrivateOrdersProcessUnreservedProductsJSONRequestBody = PrivateOrderProcessUnreservedProductsReq

// OrdersUpdateOrderJSONRequestBody defines body for OrdersUpdateOrder for application/json ContentType.
type OrdersUpdateOrderJSONRequestBody = OrdersUpdateOrderReq

// Method & Path constants for routes.
// Batch cancel unpaid orders
const PrivateOrdersBatchCancelUnpaidOrdersMethod = "POST"
const PrivateOrdersBatchCancelUnpaidOrdersPath = "/api/private/v1/order/batch-cancel-unpaid-orders"

// Cancel order operations
const PrivateOrdersCancelOperationsMethod = "POST"
const PrivateOrdersCancelOperationsPath = "/api/private/v1/order/operations/cancel"

// Process published cart positions
const PrivateOrdersProcessPublishedCartPositionsMethod = "POST"
const PrivateOrdersProcessPublishedCartPositionsPath = "/api/private/v1/order/process-published-cart-positions"

// Process reserved products
const PrivateOrdersProcessReservedProductsMethod = "POST"
const PrivateOrdersProcessReservedProductsPath = "/api/private/v1/order/process-reserved-products"

// Process unreserved products
const PrivateOrdersProcessUnreservedProductsMethod = "POST"
const PrivateOrdersProcessUnreservedProductsPath = "/api/private/v1/order/process-unreserved-products"

// Get orders operation
const OrdersGetOperationMethod = "GET"
const OrdersGetOperationPath = "/api/v1/order/operations/:operation_id"

// List orders
const OrdersListOrdersMethod = "GET"
const OrdersListOrdersPath = "/api/v1/order/orders"

// Create order
const OrdersCreateOrderMethod = "POST"
const OrdersCreateOrderPath = "/api/v1/order/orders"

// Get order
const OrdersGetOrderMethod = "GET"
const OrdersGetOrderPath = "/api/v1/order/orders/:order_id"

// Update order
const OrdersUpdateOrderMethod = "PATCH"
const OrdersUpdateOrderPath = "/api/v1/order/orders/:order_id"

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Batch cancel unpaid orders
	// (POST /api/private/v1/order/batch-cancel-unpaid-orders)
	PrivateOrdersBatchCancelUnpaidOrders(c *gin.Context)
	// Cancel order operations
	// (POST /api/private/v1/order/operations/cancel)
	PrivateOrdersCancelOperations(c *gin.Context)
	// Process published cart positions
	// (POST /api/private/v1/order/process-published-cart-positions)
	PrivateOrdersProcessPublishedCartPositions(c *gin.Context)
	// Process reserved products
	// (POST /api/private/v1/order/process-reserved-products)
	PrivateOrdersProcessReservedProducts(c *gin.Context)
	// Process unreserved products
	// (POST /api/private/v1/order/process-unreserved-products)
	PrivateOrdersProcessUnreservedProducts(c *gin.Context)
	// Get orders operation
	// (GET /api/v1/order/operations/{operation_id})
	OrdersGetOperation(c *gin.Context, operationId string)
	// List orders
	// (GET /api/v1/order/orders)
	OrdersListOrders(c *gin.Context, params OrdersListOrdersParams)
	// Create order
	// (POST /api/v1/order/orders)
	OrdersCreateOrder(c *gin.Context)
	// Get order
	// (GET /api/v1/order/orders/{order_id})
	OrdersGetOrder(c *gin.Context, orderId string)
	// Update order
	// (PATCH /api/v1/order/orders/{order_id})
	OrdersUpdateOrder(c *gin.Context, orderId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PrivateOrdersBatchCancelUnpaidOrders operation middleware
func (siw *ServerInterfaceWrapper) PrivateOrdersBatchCancelUnpaidOrders(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PrivateOrdersBatchCancelUnpaidOrders(c)
}

// PrivateOrdersCancelOperations operation middleware
func (siw *ServerInterfaceWrapper) PrivateOrdersCancelOperations(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PrivateOrdersCancelOperations(c)
}

// PrivateOrdersProcessPublishedCartPositions operation middleware
func (siw *ServerInterfaceWrapper) PrivateOrdersProcessPublishedCartPositions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PrivateOrdersProcessPublishedCartPositions(c)
}

// PrivateOrdersProcessReservedProducts operation middleware
func (siw *ServerInterfaceWrapper) PrivateOrdersProcessReservedProducts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PrivateOrdersProcessReservedProducts(c)
}

// PrivateOrdersProcessUnreservedProducts operation middleware
func (siw *ServerInterfaceWrapper) PrivateOrdersProcessUnreservedProducts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PrivateOrdersProcessUnreservedProducts(c)
}

// OrdersGetOperation operation middleware
func (siw *ServerInterfaceWrapper) OrdersGetOperation(c *gin.Context) {

	var err error

	// ------------- Path parameter "operation_id" -------------
	var operationId string

	err = runtime.BindStyledParameterWithOptions("simple", "operation_id", c.Param("operation_id"), &operationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter operation_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OrdersGetOperation(c, operationId)
}

// OrdersListOrders operation middleware
func (siw *ServerInterfaceWrapper) OrdersListOrders(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params OrdersListOrdersParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument user_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "next_page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "next_page_token", c.Request.URL.Query(), &params.NextPageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter next_page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OrdersListOrders(c, params)
}

// OrdersCreateOrder operation middleware
func (siw *ServerInterfaceWrapper) OrdersCreateOrder(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OrdersCreateOrder(c)
}

// OrdersGetOrder operation middleware
func (siw *ServerInterfaceWrapper) OrdersGetOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "order_id" -------------
	var orderId string

	err = runtime.BindStyledParameterWithOptions("simple", "order_id", c.Param("order_id"), &orderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OrdersGetOrder(c, orderId)
}

// OrdersUpdateOrder operation middleware
func (siw *ServerInterfaceWrapper) OrdersUpdateOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "order_id" -------------
	var orderId string

	err = runtime.BindStyledParameterWithOptions("simple", "order_id", c.Param("order_id"), &orderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OrdersUpdateOrder(c, orderId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/private/v1/order/batch-cancel-unpaid-orders", wrapper.PrivateOrdersBatchCancelUnpaidOrders)
	router.POST(options.BaseURL+"/api/private/v1/order/operations/cancel", wrapper.PrivateOrdersCancelOperations)
	router.POST(options.BaseURL+"/api/private/v1/order/process-published-cart-positions", wrapper.PrivateOrdersProcessPublishedCartPositions)
	router.POST(options.BaseURL+"/api/private/v1/order/process-reserved-products", wrapper.PrivateOrdersProcessReservedProducts)
	router.POST(options.BaseURL+"/api/private/v1/order/process-unreserved-products", wrapper.PrivateOrdersProcessUnreservedProducts)
	router.GET(options.BaseURL+"/api/v1/order/operations/:operation_id", wrapper.OrdersGetOperation)
	router.GET(options.BaseURL+"/api/v1/order/orders", wrapper.OrdersListOrders)
	router.POST(options.BaseURL+"/api/v1/order/orders", wrapper.OrdersCreateOrder)
	router.GET(options.BaseURL+"/api/v1/order/orders/:order_id", wrapper.OrdersGetOrder)
	router.PATCH(options.BaseURL+"/api/v1/order/orders/:order_id", wrapper.OrdersUpdateOrder)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
