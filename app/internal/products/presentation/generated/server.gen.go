// Package oapi_codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi_codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CreateProductReq defines model for CreateProductReq.
type CreateProductReq struct {
	Description string                 `json:"description"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Price       float64                `json:"price"`
	Stock       int                    `json:"stock"`
}

// CreateProductRes defines model for CreateProductRes.
type CreateProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	Price       float64                `json:"price"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// DeleteProductPictureRes defines model for DeleteProductPictureRes.
type DeleteProductPictureRes struct {
	Id string `json:"id"`
}

// DeleteProductRes defines model for DeleteProductRes.
type DeleteProductRes struct {
	Id string `json:"id"`
}

// Err defines model for Err.
type Err struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetProductRes defines model for GetProductRes.
type GetProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	Price       float64                `json:"price"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// GetProductResPicture defines model for GetProductResPicture.
type GetProductResPicture struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// GetProductResPictures defines model for GetProductResPictures.
type GetProductResPictures = []GetProductResPicture

// ListProductsRes defines model for ListProductsRes.
type ListProductsRes struct {
	NextPageToken *string                  `json:"next_page_token"`
	Products      []ListProductsResProduct `json:"products"`
}

// ListProductsResProduct defines model for ListProductsResProduct.
type ListProductsResProduct struct {
	Id         string  `json:"id"`
	Name       string  `json:"name"`
	PictureUrl string  `json:"picture_url"`
	Price      float64 `json:"price"`
	SellerId   string  `json:"seller_id"`
}

// PrivateReserveProductsReq defines model for PrivateReserveProductsReq.
type PrivateReserveProductsReq struct {
	Messages []PrivateReserveProductsReqMessage `json:"messages"`
}

// PrivateReserveProductsReqMessage defines model for PrivateReserveProductsReqMessage.
type PrivateReserveProductsReqMessage struct {
	OrderId  string                           `json:"order_id"`
	Products PrivateReserveProductsReqProduct `json:"products"`
}

// PrivateReserveProductsReqProduct defines model for PrivateReserveProductsReqProduct.
type PrivateReserveProductsReqProduct struct {
	Count int    `json:"count"`
	Id    string `json:"id"`
}

// PrivateReserveProductsRes defines model for PrivateReserveProductsRes.
type PrivateReserveProductsRes struct {
	Message *string `json:"message,omitempty"`
}

// PrivateUnreserveProductsReq defines model for PrivateUnreserveProductsReq.
type PrivateUnreserveProductsReq struct {
	Messages []PrivateReserveProductsReqProduct `json:"messages"`
}

// PrivateUnreserveProductsRes defines model for PrivateUnreserveProductsRes.
type PrivateUnreserveProductsRes struct {
	Message *string `json:"message,omitempty"`
}

// UpdateProductReq defines model for UpdateProductReq.
type UpdateProductReq struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Price       *float64                `json:"price,omitempty"`

	// StockDelta The amount of "in stock" product count change, either of:
	// - positive: stock amount is increased (seller releases more products)
	// - negative: stock amount is decreased (item purchased)
	StockDelta *int `json:"stock_delta,omitempty"`
}

// UpdateProductRes defines model for UpdateProductRes.
type UpdateProductRes struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Price       *float64                `json:"price,omitempty"`
	Stock       *int                    `json:"stock,omitempty"`
}

// UploadProductPictureRes defines model for UploadProductPictureRes.
type UploadProductPictureRes struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// Error defines model for Error.
type Error struct {
	Errors []Err `json:"errors"`
}

// ProductsListParams defines parameters for ProductsList.
type ProductsListParams struct {
	// Filter Filter, such as "seller.id=foo" or "seller.id=foo&name=bar&in_stock=*"
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// MaxPageSize Max number of returned results
	MaxPageSize   *int    `form:"maxPageSize,omitempty" json:"maxPageSize,omitempty"`
	NextPageToken *string `form:"nextPageToken,omitempty" json:"nextPageToken,omitempty"`
}

// ProductsUploadPictureMultipartBody defines parameters for ProductsUploadPicture.
type ProductsUploadPictureMultipartBody struct {
	Caption *string             `json:"caption,omitempty"`
	File    *openapi_types.File `json:"file,omitempty"`
}

// ProductsReserveJSONRequestBody defines body for ProductsReserve for application/json ContentType.
type ProductsReserveJSONRequestBody = PrivateReserveProductsReq

// ProductsUnreserveJSONRequestBody defines body for ProductsUnreserve for application/json ContentType.
type ProductsUnreserveJSONRequestBody = PrivateUnreserveProductsReq

// ProductsCreateJSONRequestBody defines body for ProductsCreate for application/json ContentType.
type ProductsCreateJSONRequestBody = CreateProductReq

// ProductsUpdateJSONRequestBody defines body for ProductsUpdate for application/json ContentType.
type ProductsUpdateJSONRequestBody = UpdateProductReq

// ProductsUploadPictureMultipartRequestBody defines body for ProductsUploadPicture for multipart/form-data ContentType.
type ProductsUploadPictureMultipartRequestBody ProductsUploadPictureMultipartBody

// Method & Path constants for routes.
// Reserve products
const ProductsReserveMethod = "POST"
const ProductsReservePath = "/api/private/v1/products:reserve"

// List products
const ProductsUnreserveMethod = "POST"
const ProductsUnreservePath = "/api/private/v1/products:unreserve"

// List products
const ProductsListMethod = "GET"
const ProductsListPath = "/api/v1/products"

// Create product
const ProductsCreateMethod = "POST"
const ProductsCreatePath = "/api/v1/products"

const ProductsDeleteMethod = "DELETE"
const ProductsDeletePath = "/api/v1/products/:product_id"

// Get product
const ProductsGetMethod = "GET"
const ProductsGetPath = "/api/v1/products/:product_id"

const ProductsUpdateMethod = "PATCH"
const ProductsUpdatePath = "/api/v1/products/:product_id"

// Upload a product picture
const ProductsUploadPictureMethod = "POST"
const ProductsUploadPicturePath = "/api/v1/products/:product_id/pictures"

// Delete a product picture
const ProductsDeletePictureMethod = "DELETE"
const ProductsDeletePicturePath = "/api/v1/products/:product_id/pictures/:id"

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Reserve products
	// (POST /api/private/v1/products:reserve)
	ProductsReserve(c *gin.Context)
	// List products
	// (POST /api/private/v1/products:unreserve)
	ProductsUnreserve(c *gin.Context)
	// List products
	// (GET /api/v1/products)
	ProductsList(c *gin.Context, params ProductsListParams)
	// Create product
	// (POST /api/v1/products)
	ProductsCreate(c *gin.Context)

	// (DELETE /api/v1/products/{product_id})
	ProductsDelete(c *gin.Context, productId string)
	// Get product
	// (GET /api/v1/products/{product_id})
	ProductsGet(c *gin.Context, productId string)

	// (PATCH /api/v1/products/{product_id})
	ProductsUpdate(c *gin.Context, productId string)
	// Upload a product picture
	// (POST /api/v1/products/{product_id}/pictures)
	ProductsUploadPicture(c *gin.Context, productId string)
	// Delete a product picture
	// (DELETE /api/v1/products/{product_id}/pictures/{id})
	ProductsDeletePicture(c *gin.Context, productId string, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ProductsReserve operation middleware
func (siw *ServerInterfaceWrapper) ProductsReserve(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsReserve(c)
}

// ProductsUnreserve operation middleware
func (siw *ServerInterfaceWrapper) ProductsUnreserve(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsUnreserve(c)
}

// ProductsList operation middleware
func (siw *ServerInterfaceWrapper) ProductsList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductsListParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxPageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxPageSize", c.Request.URL.Query(), &params.MaxPageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxPageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "nextPageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextPageToken", c.Request.URL.Query(), &params.NextPageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nextPageToken: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsList(c, params)
}

// ProductsCreate operation middleware
func (siw *ServerInterfaceWrapper) ProductsCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsCreate(c)
}

// ProductsDelete operation middleware
func (siw *ServerInterfaceWrapper) ProductsDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsDelete(c, productId)
}

// ProductsGet operation middleware
func (siw *ServerInterfaceWrapper) ProductsGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsGet(c, productId)
}

// ProductsUpdate operation middleware
func (siw *ServerInterfaceWrapper) ProductsUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsUpdate(c, productId)
}

// ProductsUploadPicture operation middleware
func (siw *ServerInterfaceWrapper) ProductsUploadPicture(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsUploadPicture(c, productId)
}

// ProductsDeletePicture operation middleware
func (siw *ServerInterfaceWrapper) ProductsDeletePicture(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsDeletePicture(c, productId, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/private/v1/products:reserve", wrapper.ProductsReserve)
	router.POST(options.BaseURL+"/api/private/v1/products:unreserve", wrapper.ProductsUnreserve)
	router.GET(options.BaseURL+"/api/v1/products", wrapper.ProductsList)
	router.POST(options.BaseURL+"/api/v1/products", wrapper.ProductsCreate)
	router.DELETE(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsDelete)
	router.GET(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsGet)
	router.PATCH(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsUpdate)
	router.POST(options.BaseURL+"/api/v1/products/:product_id/pictures", wrapper.ProductsUploadPicture)
	router.DELETE(options.BaseURL+"/api/v1/products/:product_id/pictures/:id", wrapper.ProductsDeletePicture)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JZ/o+nL9VwAAAP//cPQs19IvAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
