// Package oapi_codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi_codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AuthenticateReq defines model for AuthenticateReq.
type AuthenticateReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthenticateRes defines model for AuthenticateRes.
type AuthenticateRes struct {
	ExpiresAt    string `json:"expires_at"`
	RefreshToken string `json:"refresh_token"`
}

// CartClearCartRes defines model for CartClearCartRes.
type CartClearCartRes struct {
	DeletedPositions []CartClearCartResPosition `json:"deleted_positions"`
}

// CartClearCartResPosition defines model for CartClearCartResPosition.
type CartClearCartResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartDeleteCartPositionRes defines model for CartDeleteCartPositionRes.
type CartDeleteCartPositionRes struct {
	DeletedPosition CartDeleteCartPositionResPosition `json:"deleted_position"`
}

// CartDeleteCartPositionResPosition defines model for CartDeleteCartPositionResPosition.
type CartDeleteCartPositionResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartGetCartPositionsRes defines model for CartGetCartPositionsRes.
type CartGetCartPositionsRes struct {
	Positions []CartGetCartPositionsResPosition `json:"positions"`
}

// CartGetCartPositionsResPosition defines model for CartGetCartPositionsResPosition.
type CartGetCartPositionsResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartSetCartPositionRes defines model for CartSetCartPositionRes.
type CartSetCartPositionRes struct {
	SetPosition CartSetCartPositionResPosition `json:"set_position"`
}

// CartSetCartPositionResPosition defines model for CartSetCartPositionResPosition.
type CartSetCartPositionResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CatalogGetRes defines model for CatalogGetRes.
type CatalogGetRes struct {
	NextPageToken *string                `json:"next_page_token"`
	Products      []CatalogGetResProduct `json:"products"`
}

// CatalogGetResProduct defines model for CatalogGetResProduct.
type CatalogGetResProduct struct {
	Id   string `json:"id"`
	Name string `json:"name"`

	// Picture url
	Picture *string `json:"picture"`
	Price   float64 `json:"price"`
}

// CreateAccessTokenReq defines model for CreateAccessTokenReq.
type CreateAccessTokenReq struct {
	RefreshToken string `json:"refresh_token"`
}

// CreateAccessTokenRes defines model for CreateAccessTokenRes.
type CreateAccessTokenRes struct {
	AccessToken string `json:"access_token"`
	ExpiresAt   string `json:"expires_at"`
}

// CreateProductReq defines model for CreateProductReq.
type CreateProductReq struct {
	Description string                 `json:"description"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Price       float64                `json:"price"`
	Stock       int                    `json:"stock"`
}

// CreateProductRes defines model for CreateProductRes.
type CreateProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	Price       float64                `json:"price"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// CreateSellerAccountReq defines model for CreateSellerAccountReq.
type CreateSellerAccountReq struct {
	AccessToken string `json:"access_token"`
	Seller      struct {
		Email    string `json:"email"`
		Name     string `json:"name"`
		Password string `json:"password"`
	} `json:"seller"`
}

// CreateSellerAccountRes defines model for CreateSellerAccountRes.
type CreateSellerAccountRes struct {
	Email *string `json:"email,omitempty"`
	Name  string  `json:"name"`
}

// CreateUserAccountReq defines model for CreateUserAccountReq.
type CreateUserAccountReq struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// CreateUserAccountRes defines model for CreateUserAccountRes.
type CreateUserAccountRes struct {
	Email *string `json:"email,omitempty"`
	Name  string  `json:"name"`
}

// DeleteProductPictureRes defines model for DeleteProductPictureRes.
type DeleteProductPictureRes struct {
	Id string `json:"id"`
}

// DeleteProductRes defines model for DeleteProductRes.
type DeleteProductRes struct {
	Id string `json:"id"`
}

// Err defines model for Err.
type Err struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetProductRes defines model for GetProductRes.
type GetProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	Price       float64                `json:"price"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// GetProductResPicture defines model for GetProductResPicture.
type GetProductResPicture struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// GetProductResPictures defines model for GetProductResPictures.
type GetProductResPictures = []GetProductResPicture

// ListProductsRes defines model for ListProductsRes.
type ListProductsRes struct {
	NextPageToken *string                  `json:"next_page_token"`
	Products      []ListProductsResProduct `json:"products"`
}

// ListProductsResProduct defines model for ListProductsResProduct.
type ListProductsResProduct struct {
	Id         string  `json:"id"`
	Name       string  `json:"name"`
	PictureUrl string  `json:"picture_url"`
	Price      float64 `json:"price"`
	SellerId   string  `json:"seller_id"`
}

// PrivateClearCartsContentsReq defines model for PrivateClearCartsContentsReq.
type PrivateClearCartsContentsReq struct {
	Message string `json:"message"`
}

// PrivateClearCartsContentsRes defines model for PrivateClearCartsContentsRes.
type PrivateClearCartsContentsRes struct {
	Message *string `json:"message,omitempty"`
}

// PrivateFeedbackProcessCompletedOrderReq defines model for PrivateFeedbackProcessCompletedOrderReq.
type PrivateFeedbackProcessCompletedOrderReq struct {
	Messages []PrivateFeedbackProcessCompletedOrderReqMessage `json:"messages"`
}

// PrivateFeedbackProcessCompletedOrderReqMessage defines model for PrivateFeedbackProcessCompletedOrderReqMessage.
type PrivateFeedbackProcessCompletedOrderReqMessage struct {
	OrderId  string                                          `json:"order_id"`
	Products PrivateFeedbackProcessCompletedOrderReqProducts `json:"products"`
}

// PrivateFeedbackProcessCompletedOrderReqProducts defines model for PrivateFeedbackProcessCompletedOrderReqProducts.
type PrivateFeedbackProcessCompletedOrderReqProducts struct {
	Id string `json:"id"`
}

// PrivateFeedbackProcessCompletedOrderRes defines model for PrivateFeedbackProcessCompletedOrderRes.
type PrivateFeedbackProcessCompletedOrderRes struct {
	Message *string `json:"message,omitempty"`
}

// PrivatePublishCartsContentsReq defines model for PrivatePublishCartsContentsReq.
type PrivatePublishCartsContentsReq struct {
	Messages []PrivatePublishCartsContentsReqItem `json:"messages"`
}

// PrivatePublishCartsContentsReqItem defines model for PrivatePublishCartsContentsReqItem.
type PrivatePublishCartsContentsReqItem struct {
	Count *int    `json:"count,omitempty"`
	Id    *string `json:"id,omitempty"`
}

// PrivatePublishCartsContentsRes defines model for PrivatePublishCartsContentsRes.
type PrivatePublishCartsContentsRes struct {
	Message string `json:"message"`
}

// PrivateReserveProductsReq defines model for PrivateReserveProductsReq.
type PrivateReserveProductsReq struct {
	Messages []PrivateReserveProductsReqMessage `json:"messages"`
}

// PrivateReserveProductsReqMessage defines model for PrivateReserveProductsReqMessage.
type PrivateReserveProductsReqMessage struct {
	OrderId  string                           `json:"order_id"`
	Products PrivateReserveProductsReqProduct `json:"products"`
}

// PrivateReserveProductsReqProduct defines model for PrivateReserveProductsReqProduct.
type PrivateReserveProductsReqProduct struct {
	Count int    `json:"count"`
	Id    string `json:"id"`
}

// PrivateReserveProductsRes defines model for PrivateReserveProductsRes.
type PrivateReserveProductsRes struct {
	Message string `json:"message"`
}

// PrivateUnreserveProductsReq defines model for PrivateUnreserveProductsReq.
type PrivateUnreserveProductsReq struct {
	Messages []PrivateReserveProductsReqProduct `json:"messages"`
}

// PrivateUnreserveProductsReqProduct defines model for PrivateUnreserveProductsReqProduct.
type PrivateUnreserveProductsReqProduct struct {
	Count int    `json:"count"`
	Id    string `json:"id"`
}

// PrivateUnreserveProductsRes defines model for PrivateUnreserveProductsRes.
type PrivateUnreserveProductsRes struct {
	Message string `json:"message"`
}

// ReplaceRefreshTokenReq defines model for ReplaceRefreshTokenReq.
type ReplaceRefreshTokenReq struct {
	RefreshToken string `json:"refresh_token"`
}

// ReplaceRefreshTokenRes defines model for ReplaceRefreshTokenRes.
type ReplaceRefreshTokenRes struct {
	ExpiresAt    string `json:"expires_at"`
	RefreshToken string `json:"refresh_token"`
}

// UpdateProductReq defines model for UpdateProductReq.
type UpdateProductReq struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Price       *float64                `json:"price,omitempty"`

	// StockDelta The amount of "in stock" product count change, either of:
	// - positive: stock amount is increased (seller releases more products)
	// - negative: stock amount is decreased (item purchased)
	StockDelta *int `json:"stock_delta,omitempty"`
}

// UpdateProductRes defines model for UpdateProductRes.
type UpdateProductRes struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Price       *float64                `json:"price,omitempty"`
	Stock       *int                    `json:"stock,omitempty"`
}

// UploadProductPictureRes defines model for UploadProductPictureRes.
type UploadProductPictureRes struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// Error defines model for Error.
type Error struct {
	Errors []Err `json:"errors"`
}

// ProductsListParams defines parameters for ProductsList.
type ProductsListParams struct {
	// Filter Filter, such as "seller.id=foo" or "seller.id=foo&name=bar&in_stock=*"
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// MaxPageSize Max number of returned results
	MaxPageSize   *int    `form:"maxPageSize,omitempty" json:"maxPageSize,omitempty"`
	NextPageToken *string `form:"nextPageToken,omitempty" json:"nextPageToken,omitempty"`
}

// ProductsUploadPictureMultipartBody defines parameters for ProductsUploadPicture.
type ProductsUploadPictureMultipartBody struct {
	Caption *string             `json:"caption,omitempty"`
	File    *openapi_types.File `json:"file,omitempty"`
}

// ProductsReserveJSONRequestBody defines body for ProductsReserve for application/json ContentType.
type ProductsReserveJSONRequestBody = PrivateReserveProductsReq

// ProductsUnreserveJSONRequestBody defines body for ProductsUnreserve for application/json ContentType.
type ProductsUnreserveJSONRequestBody = PrivateUnreserveProductsReq

// ProductsCreateJSONRequestBody defines body for ProductsCreate for application/json ContentType.
type ProductsCreateJSONRequestBody = CreateProductReq

// ProductsUpdateJSONRequestBody defines body for ProductsUpdate for application/json ContentType.
type ProductsUpdateJSONRequestBody = UpdateProductReq

// ProductsUploadPictureMultipartRequestBody defines body for ProductsUploadPicture for multipart/form-data ContentType.
type ProductsUploadPictureMultipartRequestBody ProductsUploadPictureMultipartBody

// Method & Path constants for routes.
// Reserve products
const ProductsReserveMethod = "POST"
const ProductsReservePath = "/api/private/v1/products:reserve"

// List products
const ProductsUnreserveMethod = "POST"
const ProductsUnreservePath = "/api/private/v1/products:unreserve"

// List products
const ProductsListMethod = "GET"
const ProductsListPath = "/api/v1/products"

// Create product
const ProductsCreateMethod = "POST"
const ProductsCreatePath = "/api/v1/products"

const ProductsDeleteMethod = "DELETE"
const ProductsDeletePath = "/api/v1/products/:product_id"

// Get product
const ProductsGetMethod = "GET"
const ProductsGetPath = "/api/v1/products/:product_id"

const ProductsUpdateMethod = "PATCH"
const ProductsUpdatePath = "/api/v1/products/:product_id"

// Upload a product picture
const ProductsUploadPictureMethod = "POST"
const ProductsUploadPicturePath = "/api/v1/products/:product_id/pictures"

// Delete a product picture
const ProductsDeletePictureMethod = "DELETE"
const ProductsDeletePicturePath = "/api/v1/products/:product_id/pictures/:id"

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Reserve products
	// (POST /api/private/v1/products:reserve)
	ProductsReserve(c *gin.Context)
	// List products
	// (POST /api/private/v1/products:unreserve)
	ProductsUnreserve(c *gin.Context)
	// List products
	// (GET /api/v1/products)
	ProductsList(c *gin.Context, params ProductsListParams)
	// Create product
	// (POST /api/v1/products)
	ProductsCreate(c *gin.Context)

	// (DELETE /api/v1/products/{product_id})
	ProductsDelete(c *gin.Context, productId string)
	// Get product
	// (GET /api/v1/products/{product_id})
	ProductsGet(c *gin.Context, productId string)

	// (PATCH /api/v1/products/{product_id})
	ProductsUpdate(c *gin.Context, productId string)
	// Upload a product picture
	// (POST /api/v1/products/{product_id}/pictures)
	ProductsUploadPicture(c *gin.Context, productId string)
	// Delete a product picture
	// (DELETE /api/v1/products/{product_id}/pictures/{id})
	ProductsDeletePicture(c *gin.Context, productId string, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ProductsReserve operation middleware
func (siw *ServerInterfaceWrapper) ProductsReserve(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsReserve(c)
}

// ProductsUnreserve operation middleware
func (siw *ServerInterfaceWrapper) ProductsUnreserve(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsUnreserve(c)
}

// ProductsList operation middleware
func (siw *ServerInterfaceWrapper) ProductsList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductsListParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxPageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxPageSize", c.Request.URL.Query(), &params.MaxPageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxPageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "nextPageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextPageToken", c.Request.URL.Query(), &params.NextPageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nextPageToken: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsList(c, params)
}

// ProductsCreate operation middleware
func (siw *ServerInterfaceWrapper) ProductsCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsCreate(c)
}

// ProductsDelete operation middleware
func (siw *ServerInterfaceWrapper) ProductsDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsDelete(c, productId)
}

// ProductsGet operation middleware
func (siw *ServerInterfaceWrapper) ProductsGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsGet(c, productId)
}

// ProductsUpdate operation middleware
func (siw *ServerInterfaceWrapper) ProductsUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsUpdate(c, productId)
}

// ProductsUploadPicture operation middleware
func (siw *ServerInterfaceWrapper) ProductsUploadPicture(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsUploadPicture(c, productId)
}

// ProductsDeletePicture operation middleware
func (siw *ServerInterfaceWrapper) ProductsDeletePicture(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsDeletePicture(c, productId, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/private/v1/products:reserve", wrapper.ProductsReserve)
	router.POST(options.BaseURL+"/api/private/v1/products:unreserve", wrapper.ProductsUnreserve)
	router.GET(options.BaseURL+"/api/v1/products", wrapper.ProductsList)
	router.POST(options.BaseURL+"/api/v1/products", wrapper.ProductsCreate)
	router.DELETE(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsDelete)
	router.GET(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsGet)
	router.PATCH(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsUpdate)
	router.POST(options.BaseURL+"/api/v1/products/:product_id/pictures", wrapper.ProductsUploadPicture)
	router.DELETE(options.BaseURL+"/api/v1/products/:product_id/pictures/:id", wrapper.ProductsDeletePicture)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w8bW/bONJ/heDzALc9KHHaAtuDgX7IdbNBcVuskaTAAZvAZaSxzVYiVZJK4wb+7we+",
	"6MUSZUmJnbjpflMkct5nODMc5w6HPEk5A6YkHt9hATLlTIL540QILvRDyJkCpvQjSdOYhkRRzkafJWf6",
	"nQwXkBDzNYqo/kTiieApCEU1pBmJJQQ4rby6w6CBmyeqIDEP/y9ghsf4/0YlTSMLW45OhMCrAKtlCniM",
	"iRBkiVerAAv4mlEBER7/lYO8Kpbx688QKrzSCyOQoaCppg6P7VINcCLoDVGgwY/v8O2BInOpYaX2/ZSk",
	"FF/p/Y4Qveo4UwtgSosBzuDrUMYTQmP94IiUSlA217SkRMpvXESej3VODYzKjibPQY1MOZTM25QKkFOi",
	"vLQKmAmQi6niX4B1E7y+PKhC95H+jgj1LgYi9MNw2iOIQUE0Tbk0W/qbWR3xxEHotL0myj58FeCH8Rfy",
	"jFXVQpmCORh7TgWPslBNaQ8rqqwNHMw2on8z7OmnnOSHa6WPLrx4S6V0KGEYOz+MMk5BVUmXw1VxP8fw",
	"4O3tH91+sQn6vmvkfJ324QqRoAb5RRNhq1Osge7PwA8ie0ViPj+FexwSDG7VNCVzKM8wlsUxuY4Bj5XI",
	"IPCc0JasIW5TIXBid3f7So4laBDZKYQcxzBZeFUSYEYS8GcqNFSZABvVq3lVJnRa0kOONDS7Z1wkOsPA",
	"Ec/0hmIty5JrbTY10Rh7MGTlQLwSEUAUHIchSHmh5TY8S3tQftOTpqEWS8zmVpKCzTlbjeI1YN0JmaHe",
	"Gddwaa4ZiYfwBBSJiCKVjyXudivsbUUBloqHX3xxqSYWZ1tVgivk5XC6ja8Q1VAlh2Z71JZ3d0myxZPv",
	"KWDr5p1R7hRUye8k3zRUQxDHIKYtDLTqL8BZGrVLzBc/SkyBX98F3xtUH1Q1tUZEu1GcG8THoTnQhntR",
	"p/9bxkyC17PkbFd971rUSbBHSdpITAy1wTpfvaUnt1Z3twih9ehpJ/GjfIB6d6qlXD352bmpceDhZb+E",
	"bcs3F3JcvBlOY588lEbdBDwqZteoGpSRR+APnAlISeY9tGFAlOt9dK0dAX8feX8fedgnoe2UJbrI6Me2",
	"XtmXtv5FnZezRlEX4D+ozBfKPa1PayTuqEJtwfIoNerUby3bc9QNFWrV63IXqpLlk5W7kCi6xPKdvXyR",
	"wxOK3vG9NbAHrTciGwmV2yR0MEW/A0TXJPwyEVznle94kpq28J8iAnFvKfb3qZ5kfHBMd/lagf9qB7L4",
	"UEp+gEi43t12bFVj0BbElMeNTTEok7mXFZTtQliTCmePkO09nOKn9cNJdh1TudhOEBvsfi3Y3ytIduty",
	"mxBvrZfex6YKXygdZHv8yH08i85AgriBMtV4LGNrIn6U6N6O9unieZOmIqlsD+APCtvtGB/V3TZdVd2H",
	"i730sI9M7I+P9a1WHuRjPo5/RPvy8LFfFnYGaUxCOLM3aftybeel6oeapfpo2jQDru4SyqpvX+7pZd40",
	"gtgiWb+CvlgAIon2E8Rn6BJThsz6S4zciYOMF6FwQdgcAgRULUAgPhtfsgNkRyVuYGx35aCoRJSFAoiE",
	"CP1iC3skINYvJEq4gBy6fKHBMJgTP5gICjA6/KE0E+FC//2iZLV6O9mlUPlcFNpyO+vhP+Yk2kn3/+G9",
	"RdMsCjNB1fJcn18W2TUQAeI4UwuDWpvpAkhkbr+sAPF/D/RnLuh34lqy+ZmW0v/A0g6xUjbjhjyqYv3t",
	"JOQJOp68xwG+ASGtAxwdvjw80rzwFJiOrmP8+vDo8Mhc+6iFIWhEUjpyEXh083IUEqHGYQxEHLhhX2nn",
	"Yd2aAwNHiQxWgX9zasuEe2yfuSJ2ZLJAOU5tMTsN82p2aj70B5g74tideG7iTTVjhcspUDUVTUEYDbyP",
	"8BhXDksDydoBSPVvHi0HjUbfK8PRWje2V5nKfnV0tHPE0jcznX9GJhaYzzOSxaoNSUH1yA6SG9/IkoSI",
	"pV/0ZWbgXum0YKDKM9ap9D+oVN0aL/Kl3ercm1A/jta9GeHO9V6X/lClu3gzunM9jdWoOszaY9Xorhwu",
	"XNW3mEm69ZfV+ncO97YnvcpEYEESUCA003VIv9NYgQiQzMIFIhJduhuEQxq9nXF+iREXjZfZ0dGrX/Uh",
	"8vaaCPsXZVNzor795yXGgT1vvmYgluVxMzOocFAxmcaZVyfvA7lF9szWmZUAlQkGERIgs9hw7kOUkNsJ",
	"mcM5/Q5r2BLKaJIlJh1pnvp3XlgMbpUGduEy33bar3boPvVrvT1wGe0xy1A7y5wo+EaWB0aW1gxzxgll",
	"rsuDzd2UuKEhTIkd8bDvyWd4A/RN+uXXOH11NPv6rzevZ2UmYoKFiO3Z7OCZO+868hsS04go++Mh9wec",
	"VYOo8WidJLoI7fcZO4iyowDcGGnccdRtzAW2282DzMZlnya8VPPOv660V5RWZenJ7eo5mZUneNeDvvup",
	"SLvp2QmfroCdF5SmIDARS2fYZcBaG2MvKwh7e/800asxuuQxw/eRDvBqAcj9oqawkp3Y5DOKZ94E4eSW",
	"6EoGVaLY+JJ9+vTpkp2eXKCmrdJoZb5/v2St+cQpqGdonetjZDuKkEUIPAX1HOOfqfPDRXtwsx2kpzSf",
	"7R/njTbnjo/zRhdug7G6STk0oxBHcoen+09zhI+qc5r+Mt+2CREpur5uC1IcRVSmMVmiGReVBb8k5Ba9",
	"RKnp7BqSAqRfvUaUIcUViV+0twtsU9INA+6hZyVZrGiqa+IZF8lB3s8FFvJIbx/f6ZoQKrsuXFWWkDmM",
	"PqcwD5B9Tl1LtKSkdtFF2nvJOY6iKXxNGTE1XtfEyWq9C+t6Ajv0b3+X2ePmvxFFdMKUmS06WypnQneZ",
	"wbdZOP4ZA4HJmvpn9k/rqY3WSh6b2vDsawHR4Rh59WBX/UM+SmFrsf40bpFJEHI0JpX/9rHewHQLQs5m",
	"VCTT4qc5ddyh+38sCagFj6R2mT/PL8x0Dp1rm8yzyzrg+i9b/ejzVW4Kom3F2q+8vOtE80per1sV6q07",
	"V+UfoVDOkNNf6VxadLjpk0UTr7GhMJ/mJvdj7OaevLfs2yKUb71QnsVmstNDkr07a+cCCbih8M2zM79+",
	"w6ur1f8CAAD//8E+jxYPSAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
