// Package oapi_codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi_codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CreateProductReq defines model for CreateProductReq.
type CreateProductReq struct {
	Description string                 `json:"description"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Stock       int                    `json:"stock"`
}

// CreateProductRes defines model for CreateProductRes.
type CreateProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// DeleteProductPictureRes defines model for DeleteProductPictureRes.
type DeleteProductPictureRes struct {
	Id string `json:"id"`
}

// DeleteProductRes defines model for DeleteProductRes.
type DeleteProductRes struct {
	Id string `json:"id"`
}

// Err defines model for Err.
type Err struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetProductRes defines model for GetProductRes.
type GetProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// GetProductResPicture defines model for GetProductResPicture.
type GetProductResPicture struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// GetProductResPictures defines model for GetProductResPictures.
type GetProductResPictures = []GetProductResPicture

// ListProductsRes defines model for ListProductsRes.
type ListProductsRes struct {
	NextPageToken string                   `json:"next_page_token"`
	Products      []ListProductsResProduct `json:"products"`
}

// ListProductsResProduct defines model for ListProductsResProduct.
type ListProductsResProduct struct {
	Id         string `json:"id"`
	Name       string `json:"name"`
	PictureUrl string `json:"picture_url"`
	SellerId   string `json:"seller_id"`
}

// UpdateProductReq defines model for UpdateProductReq.
type UpdateProductReq struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`

	// StockDelta The amount of "in stock" product count change, either of:
	// - positive: stock amount is increased (seller releases more products)
	// - negative: stock amount is decreased (item purchased)
	StockDelta *int `json:"stock_delta,omitempty"`
}

// UpdateProductRes defines model for UpdateProductRes.
type UpdateProductRes struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Stock       *int                    `json:"stock,omitempty"`
}

// UploadProductPictureRes defines model for UploadProductPictureRes.
type UploadProductPictureRes struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// Error defines model for Error.
type Error struct {
	Errors []Err `json:"errors"`
}

// ProductsListParams defines parameters for ProductsList.
type ProductsListParams struct {
	// Filter Filter, such as "seller.id=foo" or "seller.id=foo&name=bar&in_stock=*"
	Filter        string  `form:"filter" json:"filter"`
	NextPageToken *string `form:"nextPageToken,omitempty" json:"nextPageToken,omitempty"`
}

// ProductsUploadPictureMultipartBody defines parameters for ProductsUploadPicture.
type ProductsUploadPictureMultipartBody struct {
	Caption *string             `json:"caption,omitempty"`
	File    *openapi_types.File `json:"file,omitempty"`
}

// ProductsCreateJSONRequestBody defines body for ProductsCreate for application/json ContentType.
type ProductsCreateJSONRequestBody = CreateProductReq

// ProductsUpdateJSONRequestBody defines body for ProductsUpdate for application/json ContentType.
type ProductsUpdateJSONRequestBody = UpdateProductReq

// ProductsUploadPictureMultipartRequestBody defines body for ProductsUploadPicture for multipart/form-data ContentType.
type ProductsUploadPictureMultipartRequestBody ProductsUploadPictureMultipartBody

// Method & Path constants for routes.
// List products
const ProductsListMethod = "GET"
const ProductsListPath = "/api/v1/products"

// Create product
const ProductsCreateMethod = "POST"
const ProductsCreatePath = "/api/v1/products"

const ProductsDeleteMethod = "DELETE"
const ProductsDeletePath = "/api/v1/products/:product_id"

// Get product
const ProductsGetMethod = "GET"
const ProductsGetPath = "/api/v1/products/:product_id"

const ProductsUpdateMethod = "PATCH"
const ProductsUpdatePath = "/api/v1/products/:product_id"

// Upload a product picture
const ProductsUploadPictureMethod = "POST"
const ProductsUploadPicturePath = "/api/v1/products/:product_id/pictures"

// Delete a product picture
const ProductsDeletePictureMethod = "DELETE"
const ProductsDeletePicturePath = "/api/v1/products/:product_id/pictures/:id"

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List products
	// (GET /api/v1/products)
	ProductsList(c *gin.Context, params ProductsListParams)
	// Create product
	// (POST /api/v1/products)
	ProductsCreate(c *gin.Context)

	// (DELETE /api/v1/products/{product_id})
	ProductsDelete(c *gin.Context, productId string)
	// Get product
	// (GET /api/v1/products/{product_id})
	ProductsGet(c *gin.Context, productId string)

	// (PATCH /api/v1/products/{product_id})
	ProductsUpdate(c *gin.Context, productId string)
	// Upload a product picture
	// (POST /api/v1/products/{product_id}/pictures)
	ProductsUploadPicture(c *gin.Context, productId string)
	// Delete a product picture
	// (DELETE /api/v1/products/{product_id}/pictures/{id})
	ProductsDeletePicture(c *gin.Context, productId string, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ProductsList operation middleware
func (siw *ServerInterfaceWrapper) ProductsList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductsListParams

	// ------------- Required query parameter "filter" -------------

	if paramValue := c.Query("filter"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument filter is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "nextPageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextPageToken", c.Request.URL.Query(), &params.NextPageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nextPageToken: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsList(c, params)
}

// ProductsCreate operation middleware
func (siw *ServerInterfaceWrapper) ProductsCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsCreate(c)
}

// ProductsDelete operation middleware
func (siw *ServerInterfaceWrapper) ProductsDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsDelete(c, productId)
}

// ProductsGet operation middleware
func (siw *ServerInterfaceWrapper) ProductsGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsGet(c, productId)
}

// ProductsUpdate operation middleware
func (siw *ServerInterfaceWrapper) ProductsUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsUpdate(c, productId)
}

// ProductsUploadPicture operation middleware
func (siw *ServerInterfaceWrapper) ProductsUploadPicture(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsUploadPicture(c, productId)
}

// ProductsDeletePicture operation middleware
func (siw *ServerInterfaceWrapper) ProductsDeletePicture(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsDeletePicture(c, productId, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/products", wrapper.ProductsList)
	router.POST(options.BaseURL+"/api/v1/products", wrapper.ProductsCreate)
	router.DELETE(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsDelete)
	router.GET(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsGet)
	router.PATCH(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsUpdate)
	router.POST(options.BaseURL+"/api/v1/products/:product_id/pictures", wrapper.ProductsUploadPicture)
	router.DELETE(options.BaseURL+"/api/v1/products/:product_id/pictures/:id", wrapper.ProductsDeletePicture)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"s4fFIgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
