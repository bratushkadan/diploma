// Package oapi_codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi_codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AuthenticateReq defines model for AuthenticateReq.
type AuthenticateReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthenticateRes defines model for AuthenticateRes.
type AuthenticateRes struct {
	ExpiresAt    string `json:"expires_at"`
	RefreshToken string `json:"refresh_token"`
}

// CartClearCartRes defines model for CartClearCartRes.
type CartClearCartRes = map[string]interface{}

// CartClearCartResPosition defines model for CartClearCartResPosition.
type CartClearCartResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartDeleteCartPositionRes defines model for CartDeleteCartPositionRes.
type CartDeleteCartPositionRes struct {
	DeletedPosition CartDeleteCartPositionResPosition `json:"deleted_position"`
}

// CartDeleteCartPositionResPosition defines model for CartDeleteCartPositionResPosition.
type CartDeleteCartPositionResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartGetCartPositionsRes defines model for CartGetCartPositionsRes.
type CartGetCartPositionsRes struct {
	Positions []CartGetCartPositionsResPosition `json:"positions"`
}

// CartGetCartPositionsResPosition defines model for CartGetCartPositionsResPosition.
type CartGetCartPositionsResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartSetCartPositionRes defines model for CartSetCartPositionRes.
type CartSetCartPositionRes struct {
	SetPosition CartSetCartPositionResPosition `json:"set_position"`
}

// CartSetCartPositionResPosition defines model for CartSetCartPositionResPosition.
type CartSetCartPositionResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CatalogGetRes defines model for CatalogGetRes.
type CatalogGetRes struct {
	NextPageToken *string                `json:"next_page_token"`
	Products      []CatalogGetResProduct `json:"products"`
}

// CatalogGetResProduct defines model for CatalogGetResProduct.
type CatalogGetResProduct struct {
	Id   string `json:"id"`
	Name string `json:"name"`

	// Picture url
	Picture *string `json:"picture"`
	Price   float64 `json:"price"`
}

// CreateAccessTokenReq defines model for CreateAccessTokenReq.
type CreateAccessTokenReq struct {
	RefreshToken string `json:"refresh_token"`
}

// CreateAccessTokenRes defines model for CreateAccessTokenRes.
type CreateAccessTokenRes struct {
	AccessToken string `json:"access_token"`
	ExpiresAt   string `json:"expires_at"`
}

// CreateProductReq defines model for CreateProductReq.
type CreateProductReq struct {
	Description string                 `json:"description"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Price       float64                `json:"price"`
	Stock       int                    `json:"stock"`
}

// CreateProductRes defines model for CreateProductRes.
type CreateProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	Price       float64                `json:"price"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// CreateSellerAccountReq defines model for CreateSellerAccountReq.
type CreateSellerAccountReq struct {
	AccessToken string `json:"access_token"`
	Seller      struct {
		Email    string `json:"email"`
		Name     string `json:"name"`
		Password string `json:"password"`
	} `json:"seller"`
}

// CreateSellerAccountRes defines model for CreateSellerAccountRes.
type CreateSellerAccountRes struct {
	Email *string `json:"email,omitempty"`
	Name  string  `json:"name"`
}

// CreateUserAccountReq defines model for CreateUserAccountReq.
type CreateUserAccountReq struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// CreateUserAccountRes defines model for CreateUserAccountRes.
type CreateUserAccountRes struct {
	Email *string `json:"email,omitempty"`
	Name  string  `json:"name"`
}

// DeleteProductPictureRes defines model for DeleteProductPictureRes.
type DeleteProductPictureRes struct {
	Id string `json:"id"`
}

// DeleteProductRes defines model for DeleteProductRes.
type DeleteProductRes struct {
	Id string `json:"id"`
}

// Err defines model for Err.
type Err struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FeedbackCreateProductReviewReq defines model for FeedbackCreateProductReviewReq.
type FeedbackCreateProductReviewReq struct {
	Rating float64 `json:"rating"`
	Review string  `json:"review"`
}

// FeedbackCreateProductReviewRes defines model for FeedbackCreateProductReviewRes.
type FeedbackCreateProductReviewRes struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	ProductId string  `json:"product_id"`
	Rating    float64 `json:"rating"`
	Review    string  `json:"review"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// FeedbackDeleteProductReviewRes defines model for FeedbackDeleteProductReviewRes.
type FeedbackDeleteProductReviewRes struct {
	Id string `json:"id"`
}

// FeedbackGetProductRatingRes defines model for FeedbackGetProductRatingRes.
type FeedbackGetProductRatingRes struct {
	ProductId string `json:"product_id"`
	Rating    int    `json:"rating"`
}

// FeedbackGetProductReviewRes defines model for FeedbackGetProductReviewRes.
type FeedbackGetProductReviewRes struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	ProductId string  `json:"product_id"`
	Rating    float64 `json:"rating"`
	Review    string  `json:"review"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// FeedbackListProductRatingsRes defines model for FeedbackListProductRatingsRes.
type FeedbackListProductRatingsRes struct {
	Ratings []FeedbackListProductRatingsResRating `json:"ratings"`
}

// FeedbackListProductRatingsResRating defines model for FeedbackListProductRatingsResRating.
type FeedbackListProductRatingsResRating struct {
	ProductId *string `json:"product_id,omitempty"`
	Rating    int     `json:"rating"`
}

// FeedbackListProductReviewsRes defines model for FeedbackListProductReviewsRes.
type FeedbackListProductReviewsRes struct {
	NextPageToken *string                               `json:"next_page_token"`
	Reviews       []FeedbackListProductReviewsResReview `json:"reviews"`
}

// FeedbackListProductReviewsResReview defines model for FeedbackListProductReviewsResReview.
type FeedbackListProductReviewsResReview struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	ProductId string  `json:"product_id"`
	Rating    float64 `json:"rating"`
	Review    string  `json:"review"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// FeedbackUpdateProductReviewReq defines model for FeedbackUpdateProductReviewReq.
type FeedbackUpdateProductReviewReq struct {
	Rating *float64 `json:"rating,omitempty"`
	Review *string  `json:"review,omitempty"`
}

// FeedbackUpdateProductReviewRes defines model for FeedbackUpdateProductReviewRes.
type FeedbackUpdateProductReviewRes struct {
	Id     string   `json:"id"`
	Rating *float64 `json:"rating,omitempty"`
	Review *string  `json:"review,omitempty"`
}

// GetProductRes defines model for GetProductRes.
type GetProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	Price       float64                `json:"price"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// GetProductResPicture defines model for GetProductResPicture.
type GetProductResPicture struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// GetProductResPictures defines model for GetProductResPictures.
type GetProductResPictures = []GetProductResPicture

// ListProductsRes defines model for ListProductsRes.
type ListProductsRes struct {
	NextPageToken *string                  `json:"next_page_token"`
	Products      []ListProductsResProduct `json:"products"`
}

// ListProductsResProduct defines model for ListProductsResProduct.
type ListProductsResProduct struct {
	Id         string  `json:"id"`
	Name       string  `json:"name"`
	PictureUrl string  `json:"picture_url"`
	Price      float64 `json:"price"`
	SellerId   string  `json:"seller_id"`
}

// OrdersCreateOrderRes defines model for OrdersCreateOrderRes.
type OrdersCreateOrderRes struct {
	Operation OrdersCreateOrderResOperation `json:"operation"`
}

// OrdersCreateOrderResOperation defines model for OrdersCreateOrderResOperation.
type OrdersCreateOrderResOperation struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	OrderId   *string `json:"order_id,omitempty"`
	Status    string  `json:"status"`
	Type      string  `json:"type"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// OrdersGetOperationRes defines model for OrdersGetOperationRes.
type OrdersGetOperationRes struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	OrderId   *string `json:"order_id,omitempty"`
	Status    string  `json:"status"`
	Type      string  `json:"type"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// OrdersGetOrderRes defines model for OrdersGetOrderRes.
type OrdersGetOrderRes struct {
	CreatedAt string                `json:"created_at"`
	Id        string                `json:"id"`
	Items     OrdersGetOrderResItem `json:"items"`
	Status    string                `json:"status"`
	UpdatedAt string                `json:"updated_at"`
	UserId    string                `json:"user_id"`
}

// OrdersGetOrderResItem defines model for OrdersGetOrderResItem.
type OrdersGetOrderResItem struct {
	Count      int     `json:"count"`
	Name       string  `json:"name"`
	PictureUrl *string `json:"picture_url,omitempty"`
	Price      float64 `json:"price"`
	ProductId  string  `json:"product_id"`
	SellerId   string  `json:"seller_id"`
}

// OrdersListOrdersRes defines model for OrdersListOrdersRes.
type OrdersListOrdersRes struct {
	NextPageToken *string                    `json:"next_page_token"`
	Orders        []OrdersListOrdersResOrder `json:"orders"`
}

// OrdersListOrdersResItem defines model for OrdersListOrdersResItem.
type OrdersListOrdersResItem struct {
	Count      int     `json:"count"`
	Name       string  `json:"name"`
	PictureUrl *string `json:"picture_url,omitempty"`
	Price      float64 `json:"price"`
	ProductId  string  `json:"product_id"`
	SellerId   string  `json:"seller_id"`
}

// OrdersListOrdersResOrder defines model for OrdersListOrdersResOrder.
type OrdersListOrdersResOrder struct {
	CreatedAt *string                 `json:"created_at,omitempty"`
	Id        string                  `json:"id"`
	Items     OrdersListOrdersResItem `json:"items"`
	Status    string                  `json:"status"`
	UpdatedAt *string                 `json:"updated_at,omitempty"`
	UserId    string                  `json:"user_id"`
}

// OrdersUpdateOrderReq defines model for OrdersUpdateOrderReq.
type OrdersUpdateOrderReq struct {
	Status string `json:"status"`
}

// OrdersUpdateOrderRes defines model for OrdersUpdateOrderRes.
type OrdersUpdateOrderRes struct {
	Status    string `json:"status"`
	UpdatedAt string `json:"updated_at"`
}

// PrivateClearCartPositionsReq defines model for PrivateClearCartPositionsReq.
type PrivateClearCartPositionsReq struct {
	Messages []PrivateClearCartPositionsReqMessage `json:"messages"`
}

// PrivateClearCartPositionsReqMessage defines model for PrivateClearCartPositionsReqMessage.
type PrivateClearCartPositionsReqMessage struct {
	UserId string `json:"user_id"`
}

// PrivateClearCartPositionsRes defines model for PrivateClearCartPositionsRes.
type PrivateClearCartPositionsRes = map[string]interface{}

// PrivateFeedbackProcessCompletedOrderReq defines model for PrivateFeedbackProcessCompletedOrderReq.
type PrivateFeedbackProcessCompletedOrderReq struct {
	Messages []PrivateFeedbackProcessCompletedOrderReqMessage `json:"messages"`
}

// PrivateFeedbackProcessCompletedOrderReqMessage defines model for PrivateFeedbackProcessCompletedOrderReqMessage.
type PrivateFeedbackProcessCompletedOrderReqMessage struct {
	OrderId  string                                          `json:"order_id"`
	Products PrivateFeedbackProcessCompletedOrderReqProducts `json:"products"`
}

// PrivateFeedbackProcessCompletedOrderReqProducts defines model for PrivateFeedbackProcessCompletedOrderReqProducts.
type PrivateFeedbackProcessCompletedOrderReqProducts struct {
	Id string `json:"id"`
}

// PrivateFeedbackProcessCompletedOrderRes defines model for PrivateFeedbackProcessCompletedOrderRes.
type PrivateFeedbackProcessCompletedOrderRes = map[string]interface{}

// PrivateOrderBatchCancelUnpaidOrdersReq defines model for PrivateOrderBatchCancelUnpaidOrdersReq.
type PrivateOrderBatchCancelUnpaidOrdersReq = map[string]interface{}

// PrivateOrderBatchCancelUnpaidOrdersRes defines model for PrivateOrderBatchCancelUnpaidOrdersRes.
type PrivateOrderBatchCancelUnpaidOrdersRes = map[string]interface{}

// PrivateOrderCancelOperationsReq defines model for PrivateOrderCancelOperationsReq.
type PrivateOrderCancelOperationsReq struct {
	Messages []PrivateOrderCancelOperationsReqMessage `json:"messages"`
}

// PrivateOrderCancelOperationsReqMessage defines model for PrivateOrderCancelOperationsReqMessage.
type PrivateOrderCancelOperationsReqMessage struct {
	Details     string `json:"details"`
	OperationId string `json:"operation_id"`
}

// PrivateOrderCancelOperationsRes defines model for PrivateOrderCancelOperationsRes.
type PrivateOrderCancelOperationsRes = map[string]interface{}

// PrivateOrderProcessPublishedCartPositionsReq defines model for PrivateOrderProcessPublishedCartPositionsReq.
type PrivateOrderProcessPublishedCartPositionsReq struct {
	Messages []PrivateOrderProcessPublishedCartPositionsReqMessage `json:"messages"`
}

// PrivateOrderProcessPublishedCartPositionsReqCartPosition defines model for PrivateOrderProcessPublishedCartPositionsReqCartPosition.
type PrivateOrderProcessPublishedCartPositionsReqCartPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// PrivateOrderProcessPublishedCartPositionsReqMessage defines model for PrivateOrderProcessPublishedCartPositionsReqMessage.
type PrivateOrderProcessPublishedCartPositionsReqMessage struct {
	CartPositions []PrivateOrderProcessPublishedCartPositionsReqCartPosition `json:"cart_positions"`
	OperationId   string                                                     `json:"operation_id"`
}

// PrivateOrderProcessPublishedCartPositionsRes defines model for PrivateOrderProcessPublishedCartPositionsRes.
type PrivateOrderProcessPublishedCartPositionsRes = map[string]interface{}

// PrivateOrderProcessReservedProductsReq defines model for PrivateOrderProcessReservedProductsReq.
type PrivateOrderProcessReservedProductsReq struct {
	Messages []PrivateOrderProcessReservedProductsReqMessage `json:"messages"`
}

// PrivateOrderProcessReservedProductsReqMessage defines model for PrivateOrderProcessReservedProductsReqMessage.
type PrivateOrderProcessReservedProductsReqMessage struct {
	OperationId string                                          `json:"operation_id"`
	Products    []PrivateOrderProcessReservedProductsReqProduct `json:"products"`
}

// PrivateOrderProcessReservedProductsReqProduct defines model for PrivateOrderProcessReservedProductsReqProduct.
type PrivateOrderProcessReservedProductsReqProduct struct {
	Count    int     `json:"count"`
	Id       string  `json:"id"`
	Name     string  `json:"name"`
	Picture  *string `json:"picture,omitempty"`
	Price    float64 `json:"price"`
	SellerId string  `json:"seller_id"`
}

// PrivateOrderProcessReservedProductsRes defines model for PrivateOrderProcessReservedProductsRes.
type PrivateOrderProcessReservedProductsRes = map[string]interface{}

// PrivateOrderProcessUnreservedProductsReq defines model for PrivateOrderProcessUnreservedProductsReq.
type PrivateOrderProcessUnreservedProductsReq struct {
	Messages []PrivateOrderProcessUnreservedProductsReqMessage `json:"messages"`
}

// PrivateOrderProcessUnreservedProductsReqMessage defines model for PrivateOrderProcessUnreservedProductsReqMessage.
type PrivateOrderProcessUnreservedProductsReqMessage struct {
	OrderId string `json:"order_id"`
}

// PrivateOrderProcessUnreservedProductsRes defines model for PrivateOrderProcessUnreservedProductsRes.
type PrivateOrderProcessUnreservedProductsRes = map[string]interface{}

// PrivatePublishCartPositionsReq defines model for PrivatePublishCartPositionsReq.
type PrivatePublishCartPositionsReq struct {
	Messages []PrivatePublishCartPositionsReqMessage `json:"messages"`
}

// PrivatePublishCartPositionsReqMessage defines model for PrivatePublishCartPositionsReqMessage.
type PrivatePublishCartPositionsReqMessage struct {
	OperationId string `json:"operation_id"`
	UserId      string `json:"user_id"`
}

// PrivatePublishCartPositionsRes defines model for PrivatePublishCartPositionsRes.
type PrivatePublishCartPositionsRes = map[string]interface{}

// PrivateReserveProductsReq defines model for PrivateReserveProductsReq.
type PrivateReserveProductsReq struct {
	Messages []PrivateReserveProductsReqMessage `json:"messages"`
}

// PrivateReserveProductsReqMessage defines model for PrivateReserveProductsReqMessage.
type PrivateReserveProductsReqMessage struct {
	OperationId string                             `json:"operation_id"`
	Products    []PrivateReserveProductsReqProduct `json:"products"`
}

// PrivateReserveProductsReqProduct defines model for PrivateReserveProductsReqProduct.
type PrivateReserveProductsReqProduct struct {
	Count int    `json:"count"`
	Id    string `json:"id"`
}

// PrivateReserveProductsRes defines model for PrivateReserveProductsRes.
type PrivateReserveProductsRes = map[string]interface{}

// PrivateUnreserveProductsReq defines model for PrivateUnreserveProductsReq.
type PrivateUnreserveProductsReq struct {
	Messages []PrivateUnreserveProductsReqMessage `json:"messages"`
}

// PrivateUnreserveProductsReqMessage defines model for PrivateUnreserveProductsReqMessage.
type PrivateUnreserveProductsReqMessage struct {
	OrderId  string                             `json:"order_id"`
	Products []PrivateReserveProductsReqProduct `json:"products"`
}

// PrivateUnreserveProductsReqProduct defines model for PrivateUnreserveProductsReqProduct.
type PrivateUnreserveProductsReqProduct struct {
	Count int    `json:"count"`
	Id    string `json:"id"`
}

// PrivateUnreserveProductsRes defines model for PrivateUnreserveProductsRes.
type PrivateUnreserveProductsRes = map[string]interface{}

// ReplaceRefreshTokenReq defines model for ReplaceRefreshTokenReq.
type ReplaceRefreshTokenReq struct {
	RefreshToken string `json:"refresh_token"`
}

// ReplaceRefreshTokenRes defines model for ReplaceRefreshTokenRes.
type ReplaceRefreshTokenRes struct {
	ExpiresAt    string `json:"expires_at"`
	RefreshToken string `json:"refresh_token"`
}

// UpdateProductReq defines model for UpdateProductReq.
type UpdateProductReq struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Price       *float64                `json:"price,omitempty"`

	// StockDelta The amount of "in stock" product count change, either of:
	// - positive: stock amount is increased (seller releases more products)
	// - negative: stock amount is decreased (item purchased)
	StockDelta *int `json:"stock_delta,omitempty"`
}

// UpdateProductRes defines model for UpdateProductRes.
type UpdateProductRes struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Price       *float64                `json:"price,omitempty"`
	Stock       *int                    `json:"stock,omitempty"`
}

// UploadProductPictureRes defines model for UploadProductPictureRes.
type UploadProductPictureRes struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// Error defines model for Error.
type Error struct {
	Errors []Err `json:"errors"`
}

// ProductsListParams defines parameters for ProductsList.
type ProductsListParams struct {
	// Filter Filter, such as "seller.id=foo" or "seller.id=foo&name=bar&in_stock=*"
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// MaxPageSize Max number of returned results
	MaxPageSize   *int    `form:"maxPageSize,omitempty" json:"maxPageSize,omitempty"`
	NextPageToken *string `form:"nextPageToken,omitempty" json:"nextPageToken,omitempty"`
}

// ProductsUploadPictureMultipartBody defines parameters for ProductsUploadPicture.
type ProductsUploadPictureMultipartBody struct {
	Caption *string             `json:"caption,omitempty"`
	File    *openapi_types.File `json:"file,omitempty"`
}

// ProductsReserveJSONRequestBody defines body for ProductsReserve for application/json ContentType.
type ProductsReserveJSONRequestBody = PrivateReserveProductsReq

// ProductsUnreserveJSONRequestBody defines body for ProductsUnreserve for application/json ContentType.
type ProductsUnreserveJSONRequestBody = PrivateUnreserveProductsReq

// ProductsCreateJSONRequestBody defines body for ProductsCreate for application/json ContentType.
type ProductsCreateJSONRequestBody = CreateProductReq

// ProductsUpdateJSONRequestBody defines body for ProductsUpdate for application/json ContentType.
type ProductsUpdateJSONRequestBody = UpdateProductReq

// ProductsUploadPictureMultipartRequestBody defines body for ProductsUploadPicture for multipart/form-data ContentType.
type ProductsUploadPictureMultipartRequestBody ProductsUploadPictureMultipartBody

// Method & Path constants for routes.
// Reserve products
const ProductsReserveMethod = "POST"
const ProductsReservePath = "/api/private/v1/products/reserve"

// List products
const ProductsUnreserveMethod = "POST"
const ProductsUnreservePath = "/api/private/v1/products/unreserve"

// List products
const ProductsListMethod = "GET"
const ProductsListPath = "/api/v1/products"

// Create product
const ProductsCreateMethod = "POST"
const ProductsCreatePath = "/api/v1/products"

const ProductsDeleteMethod = "DELETE"
const ProductsDeletePath = "/api/v1/products/:product_id"

// Get product
const ProductsGetMethod = "GET"
const ProductsGetPath = "/api/v1/products/:product_id"

const ProductsUpdateMethod = "PATCH"
const ProductsUpdatePath = "/api/v1/products/:product_id"

// Upload a product picture
const ProductsUploadPictureMethod = "POST"
const ProductsUploadPicturePath = "/api/v1/products/:product_id/pictures"

// Delete a product picture
const ProductsDeletePictureMethod = "DELETE"
const ProductsDeletePicturePath = "/api/v1/products/:product_id/pictures/:id"

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Reserve products
	// (POST /api/private/v1/products/reserve)
	ProductsReserve(c *gin.Context)
	// List products
	// (POST /api/private/v1/products/unreserve)
	ProductsUnreserve(c *gin.Context)
	// List products
	// (GET /api/v1/products)
	ProductsList(c *gin.Context, params ProductsListParams)
	// Create product
	// (POST /api/v1/products)
	ProductsCreate(c *gin.Context)

	// (DELETE /api/v1/products/{product_id})
	ProductsDelete(c *gin.Context, productId string)
	// Get product
	// (GET /api/v1/products/{product_id})
	ProductsGet(c *gin.Context, productId string)

	// (PATCH /api/v1/products/{product_id})
	ProductsUpdate(c *gin.Context, productId string)
	// Upload a product picture
	// (POST /api/v1/products/{product_id}/pictures)
	ProductsUploadPicture(c *gin.Context, productId string)
	// Delete a product picture
	// (DELETE /api/v1/products/{product_id}/pictures/{id})
	ProductsDeletePicture(c *gin.Context, productId string, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ProductsReserve operation middleware
func (siw *ServerInterfaceWrapper) ProductsReserve(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsReserve(c)
}

// ProductsUnreserve operation middleware
func (siw *ServerInterfaceWrapper) ProductsUnreserve(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsUnreserve(c)
}

// ProductsList operation middleware
func (siw *ServerInterfaceWrapper) ProductsList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductsListParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxPageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxPageSize", c.Request.URL.Query(), &params.MaxPageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxPageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "nextPageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextPageToken", c.Request.URL.Query(), &params.NextPageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nextPageToken: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsList(c, params)
}

// ProductsCreate operation middleware
func (siw *ServerInterfaceWrapper) ProductsCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsCreate(c)
}

// ProductsDelete operation middleware
func (siw *ServerInterfaceWrapper) ProductsDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsDelete(c, productId)
}

// ProductsGet operation middleware
func (siw *ServerInterfaceWrapper) ProductsGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsGet(c, productId)
}

// ProductsUpdate operation middleware
func (siw *ServerInterfaceWrapper) ProductsUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsUpdate(c, productId)
}

// ProductsUploadPicture operation middleware
func (siw *ServerInterfaceWrapper) ProductsUploadPicture(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsUploadPicture(c, productId)
}

// ProductsDeletePicture operation middleware
func (siw *ServerInterfaceWrapper) ProductsDeletePicture(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsDeletePicture(c, productId, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/private/v1/products/reserve", wrapper.ProductsReserve)
	router.POST(options.BaseURL+"/api/private/v1/products/unreserve", wrapper.ProductsUnreserve)
	router.GET(options.BaseURL+"/api/v1/products", wrapper.ProductsList)
	router.POST(options.BaseURL+"/api/v1/products", wrapper.ProductsCreate)
	router.DELETE(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsDelete)
	router.GET(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsGet)
	router.PATCH(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsUpdate)
	router.POST(options.BaseURL+"/api/v1/products/:product_id/pictures", wrapper.ProductsUploadPicture)
	router.DELETE(options.BaseURL+"/api/v1/products/:product_id/pictures/:id", wrapper.ProductsDeletePicture)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
