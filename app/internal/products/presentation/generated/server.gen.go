// Package oapi_codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi_codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AuthenticateReq defines model for AuthenticateReq.
type AuthenticateReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthenticateRes defines model for AuthenticateRes.
type AuthenticateRes struct {
	ExpiresAt    string `json:"expires_at"`
	RefreshToken string `json:"refresh_token"`
}

// CartClearCartRes defines model for CartClearCartRes.
type CartClearCartRes struct {
	DeletedPositions []CartClearCartResPosition `json:"deleted_positions"`
}

// CartClearCartResPosition defines model for CartClearCartResPosition.
type CartClearCartResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartDeleteCartPositionRes defines model for CartDeleteCartPositionRes.
type CartDeleteCartPositionRes struct {
	DeletedPosition CartDeleteCartPositionResPosition `json:"deleted_position"`
}

// CartDeleteCartPositionResPosition defines model for CartDeleteCartPositionResPosition.
type CartDeleteCartPositionResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartGetCartPositionsRes defines model for CartGetCartPositionsRes.
type CartGetCartPositionsRes struct {
	Positions []CartGetCartPositionsResPosition `json:"positions"`
}

// CartGetCartPositionsResPosition defines model for CartGetCartPositionsResPosition.
type CartGetCartPositionsResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CartSetCartPositionRes defines model for CartSetCartPositionRes.
type CartSetCartPositionRes struct {
	SetPosition CartSetCartPositionResPosition `json:"set_position"`
}

// CartSetCartPositionResPosition defines model for CartSetCartPositionResPosition.
type CartSetCartPositionResPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// CatalogGetRes defines model for CatalogGetRes.
type CatalogGetRes struct {
	NextPageToken *string                `json:"next_page_token"`
	Products      []CatalogGetResProduct `json:"products"`
}

// CatalogGetResProduct defines model for CatalogGetResProduct.
type CatalogGetResProduct struct {
	Id   string `json:"id"`
	Name string `json:"name"`

	// Picture url
	Picture *string `json:"picture"`
	Price   float64 `json:"price"`
}

// CreateAccessTokenReq defines model for CreateAccessTokenReq.
type CreateAccessTokenReq struct {
	RefreshToken string `json:"refresh_token"`
}

// CreateAccessTokenRes defines model for CreateAccessTokenRes.
type CreateAccessTokenRes struct {
	AccessToken string `json:"access_token"`
	ExpiresAt   string `json:"expires_at"`
}

// CreateProductReq defines model for CreateProductReq.
type CreateProductReq struct {
	Description string                 `json:"description"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Price       float64                `json:"price"`
	Stock       int                    `json:"stock"`
}

// CreateProductRes defines model for CreateProductRes.
type CreateProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	Price       float64                `json:"price"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// CreateSellerAccountReq defines model for CreateSellerAccountReq.
type CreateSellerAccountReq struct {
	AccessToken string `json:"access_token"`
	Seller      struct {
		Email    string `json:"email"`
		Name     string `json:"name"`
		Password string `json:"password"`
	} `json:"seller"`
}

// CreateSellerAccountRes defines model for CreateSellerAccountRes.
type CreateSellerAccountRes struct {
	Email *string `json:"email,omitempty"`
	Name  string  `json:"name"`
}

// CreateUserAccountReq defines model for CreateUserAccountReq.
type CreateUserAccountReq struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// CreateUserAccountRes defines model for CreateUserAccountRes.
type CreateUserAccountRes struct {
	Email *string `json:"email,omitempty"`
	Name  string  `json:"name"`
}

// DeleteProductPictureRes defines model for DeleteProductPictureRes.
type DeleteProductPictureRes struct {
	Id string `json:"id"`
}

// DeleteProductRes defines model for DeleteProductRes.
type DeleteProductRes struct {
	Id string `json:"id"`
}

// Err defines model for Err.
type Err struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FeedbackCreateProductReviewReq defines model for FeedbackCreateProductReviewReq.
type FeedbackCreateProductReviewReq struct {
	Rating float64 `json:"rating"`
	Review string  `json:"review"`
}

// FeedbackCreateProductReviewRes defines model for FeedbackCreateProductReviewRes.
type FeedbackCreateProductReviewRes struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	ProductId string  `json:"product_id"`
	Rating    float64 `json:"rating"`
	Review    string  `json:"review"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// FeedbackDeleteProductReviewRes defines model for FeedbackDeleteProductReviewRes.
type FeedbackDeleteProductReviewRes struct {
	Id string `json:"id"`
}

// FeedbackGetProductRatingRes defines model for FeedbackGetProductRatingRes.
type FeedbackGetProductRatingRes struct {
	ProductId string `json:"product_id"`
	Rating    int    `json:"rating"`
}

// FeedbackGetProductReviewRes defines model for FeedbackGetProductReviewRes.
type FeedbackGetProductReviewRes struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	ProductId string  `json:"product_id"`
	Rating    float64 `json:"rating"`
	Review    string  `json:"review"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// FeedbackListProductRatingsRes defines model for FeedbackListProductRatingsRes.
type FeedbackListProductRatingsRes struct {
	Ratings []FeedbackListProductRatingsResRating `json:"ratings"`
}

// FeedbackListProductRatingsResRating defines model for FeedbackListProductRatingsResRating.
type FeedbackListProductRatingsResRating struct {
	ProductId *string `json:"product_id,omitempty"`
	Rating    int     `json:"rating"`
}

// FeedbackListProductReviewsRes defines model for FeedbackListProductReviewsRes.
type FeedbackListProductReviewsRes struct {
	NextPageToken *string                               `json:"next_page_token"`
	Reviews       []FeedbackListProductReviewsResReview `json:"reviews"`
}

// FeedbackListProductReviewsResReview defines model for FeedbackListProductReviewsResReview.
type FeedbackListProductReviewsResReview struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	ProductId string  `json:"product_id"`
	Rating    float64 `json:"rating"`
	Review    string  `json:"review"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// FeedbackUpdateProductReviewReq defines model for FeedbackUpdateProductReviewReq.
type FeedbackUpdateProductReviewReq struct {
	Rating *float64 `json:"rating,omitempty"`
	Review *string  `json:"review,omitempty"`
}

// FeedbackUpdateProductReviewRes defines model for FeedbackUpdateProductReviewRes.
type FeedbackUpdateProductReviewRes struct {
	Id     string   `json:"id"`
	Rating *float64 `json:"rating,omitempty"`
	Review *string  `json:"review,omitempty"`
}

// GetProductRes defines model for GetProductRes.
type GetProductRes struct {
	CreatedAt   string                 `json:"created_at"`
	Description string                 `json:"description"`
	Id          string                 `json:"id"`
	Metadata    map[string]interface{} `json:"metadata"`
	Name        string                 `json:"name"`
	Pictures    GetProductResPictures  `json:"pictures"`
	Price       float64                `json:"price"`
	SellerId    string                 `json:"seller_id"`
	Stock       int                    `json:"stock"`
	UpdatedAt   string                 `json:"updated_at"`
}

// GetProductResPicture defines model for GetProductResPicture.
type GetProductResPicture struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// GetProductResPictures defines model for GetProductResPictures.
type GetProductResPictures = []GetProductResPicture

// ListProductsRes defines model for ListProductsRes.
type ListProductsRes struct {
	NextPageToken *string                  `json:"next_page_token"`
	Products      []ListProductsResProduct `json:"products"`
}

// ListProductsResProduct defines model for ListProductsResProduct.
type ListProductsResProduct struct {
	Id         string  `json:"id"`
	Name       string  `json:"name"`
	PictureUrl string  `json:"picture_url"`
	Price      float64 `json:"price"`
	SellerId   string  `json:"seller_id"`
}

// OrdersCreateOrderRes defines model for OrdersCreateOrderRes.
type OrdersCreateOrderRes struct {
	Operation OrdersCreateOrderResOperation `json:"operation"`
}

// OrdersCreateOrderResOperation defines model for OrdersCreateOrderResOperation.
type OrdersCreateOrderResOperation struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	OrderId   *string `json:"order_id,omitempty"`
	Status    string  `json:"status"`
	Type      string  `json:"type"`
	UpdatedAt string  `json:"updated_at"`
	UserId    string  `json:"user_id"`
}

// OrdersGetOperationRes defines model for OrdersGetOperationRes.
type OrdersGetOperationRes struct {
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	OrderId   *string `json:"order_id,omitempty"`
	Status    string  `json:"status"`
	Type      string  `json:"type"`
	UpdatedAt string  `json:"updated_at"`
}

// OrdersGetOrderRes defines model for OrdersGetOrderRes.
type OrdersGetOrderRes struct {
	CreatedAt string                `json:"created_at"`
	Id        string                `json:"id"`
	Items     OrdersGetOrderResItem `json:"items"`
	Status    string                `json:"status"`
	UpdatedAt string                `json:"updated_at"`
	UserId    string                `json:"user_id"`
}

// OrdersGetOrderResItem defines model for OrdersGetOrderResItem.
type OrdersGetOrderResItem struct {
	Count      int     `json:"count"`
	Name       string  `json:"name"`
	PictureUrl *string `json:"picture_url,omitempty"`
	Price      float64 `json:"price"`
	ProductId  string  `json:"product_id"`
	SellerId   string  `json:"seller_id"`
}

// OrdersListOrdersRes defines model for OrdersListOrdersRes.
type OrdersListOrdersRes struct {
	NextPageToken *string                  `json:"next_page_token"`
	Orders        OrdersListOrdersResOrder `json:"orders"`
}

// OrdersListOrdersResItem defines model for OrdersListOrdersResItem.
type OrdersListOrdersResItem struct {
	Count      int     `json:"count"`
	Name       string  `json:"name"`
	PictureUrl *string `json:"picture_url,omitempty"`
	Price      float64 `json:"price"`
	ProductId  string  `json:"product_id"`
	SellerId   string  `json:"seller_id"`
}

// OrdersListOrdersResOrder defines model for OrdersListOrdersResOrder.
type OrdersListOrdersResOrder struct {
	CreatedAt *string                 `json:"created_at,omitempty"`
	Id        string                  `json:"id"`
	Items     OrdersListOrdersResItem `json:"items"`
	Status    string                  `json:"status"`
	UpdatedAt *string                 `json:"updated_at,omitempty"`
	UserId    string                  `json:"user_id"`
}

// OrdersUpdateOrderReq defines model for OrdersUpdateOrderReq.
type OrdersUpdateOrderReq struct {
	Status string `json:"status"`
}

// OrdersUpdateOrderRes defines model for OrdersUpdateOrderRes.
type OrdersUpdateOrderRes struct {
	Status    string `json:"status"`
	UpdatedAt string `json:"updated_at"`
}

// PrivateClearCartPositionsReq defines model for PrivateClearCartPositionsReq.
type PrivateClearCartPositionsReq struct {
	Messages []PrivateClearCartPositionsReqMessage `json:"messages"`
}

// PrivateClearCartPositionsReqMessage defines model for PrivateClearCartPositionsReqMessage.
type PrivateClearCartPositionsReqMessage struct {
	UserId string `json:"user_id"`
}

// PrivateClearCartPositionsRes defines model for PrivateClearCartPositionsRes.
type PrivateClearCartPositionsRes = map[string]interface{}

// PrivateFeedbackProcessCompletedOrderReq defines model for PrivateFeedbackProcessCompletedOrderReq.
type PrivateFeedbackProcessCompletedOrderReq struct {
	Messages []PrivateFeedbackProcessCompletedOrderReqMessage `json:"messages"`
}

// PrivateFeedbackProcessCompletedOrderReqMessage defines model for PrivateFeedbackProcessCompletedOrderReqMessage.
type PrivateFeedbackProcessCompletedOrderReqMessage struct {
	OrderId  string                                          `json:"order_id"`
	Products PrivateFeedbackProcessCompletedOrderReqProducts `json:"products"`
}

// PrivateFeedbackProcessCompletedOrderReqProducts defines model for PrivateFeedbackProcessCompletedOrderReqProducts.
type PrivateFeedbackProcessCompletedOrderReqProducts struct {
	Id string `json:"id"`
}

// PrivateFeedbackProcessCompletedOrderRes defines model for PrivateFeedbackProcessCompletedOrderRes.
type PrivateFeedbackProcessCompletedOrderRes = map[string]interface{}

// PrivateOrderBatchCancelUnpaidOrdersReq defines model for PrivateOrderBatchCancelUnpaidOrdersReq.
type PrivateOrderBatchCancelUnpaidOrdersReq = map[string]interface{}

// PrivateOrderBatchCancelUnpaidOrdersRes defines model for PrivateOrderBatchCancelUnpaidOrdersRes.
type PrivateOrderBatchCancelUnpaidOrdersRes = map[string]interface{}

// PrivateOrderCancelOrdersReq defines model for PrivateOrderCancelOrdersReq.
type PrivateOrderCancelOrdersReq struct {
	OrderId string `json:"order_id"`
}

// PrivateOrderCancelOrdersRes defines model for PrivateOrderCancelOrdersRes.
type PrivateOrderCancelOrdersRes = map[string]interface{}

// PrivateOrderProcessPublishedCartPositionsReq defines model for PrivateOrderProcessPublishedCartPositionsReq.
type PrivateOrderProcessPublishedCartPositionsReq struct {
	Messages []PrivateOrderProcessPublishedCartPositionsReqMessage `json:"messages"`
}

// PrivateOrderProcessPublishedCartPositionsReqCartPosition defines model for PrivateOrderProcessPublishedCartPositionsReqCartPosition.
type PrivateOrderProcessPublishedCartPositionsReqCartPosition struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// PrivateOrderProcessPublishedCartPositionsReqMessage defines model for PrivateOrderProcessPublishedCartPositionsReqMessage.
type PrivateOrderProcessPublishedCartPositionsReqMessage struct {
	CartPositions PrivateOrderProcessPublishedCartPositionsReqCartPosition `json:"cart_positions"`
	OrderId       string                                                   `json:"order_id"`
}

// PrivateOrderProcessPublishedCartPositionsRes defines model for PrivateOrderProcessPublishedCartPositionsRes.
type PrivateOrderProcessPublishedCartPositionsRes = map[string]interface{}

// PrivateOrderProcessReservedProductsReq defines model for PrivateOrderProcessReservedProductsReq.
type PrivateOrderProcessReservedProductsReq struct {
	Messages []PrivateOrderProcessReservedProductsReqMessage `json:"messages"`
}

// PrivateOrderProcessReservedProductsReqMessage defines model for PrivateOrderProcessReservedProductsReqMessage.
type PrivateOrderProcessReservedProductsReqMessage struct {
	OrderId  string                                        `json:"order_id"`
	Products PrivateOrderProcessReservedProductsReqProduct `json:"products"`
}

// PrivateOrderProcessReservedProductsReqProduct defines model for PrivateOrderProcessReservedProductsReqProduct.
type PrivateOrderProcessReservedProductsReqProduct struct {
	Count    int     `json:"count"`
	Id       string  `json:"id"`
	Name     string  `json:"name"`
	Picture  *string `json:"picture,omitempty"`
	Price    float64 `json:"price"`
	SellerId string  `json:"seller_id"`
}

// PrivateOrderProcessReservedProductsRes defines model for PrivateOrderProcessReservedProductsRes.
type PrivateOrderProcessReservedProductsRes = map[string]interface{}

// PrivatePublishCartPositionsReq defines model for PrivatePublishCartPositionsReq.
type PrivatePublishCartPositionsReq struct {
	Messages []PrivatePublishCartPositionsReqMessage `json:"messages"`
}

// PrivatePublishCartPositionsReqItem defines model for PrivatePublishCartPositionsReqItem.
type PrivatePublishCartPositionsReqItem struct {
	Count     int    `json:"count"`
	ProductId string `json:"product_id"`
}

// PrivatePublishCartPositionsReqMessage defines model for PrivatePublishCartPositionsReqMessage.
type PrivatePublishCartPositionsReqMessage struct {
	CartPositions PrivatePublishCartPositionsReqItem `json:"cart_positions"`
	OperationId   string                             `json:"operation_id"`
}

// PrivatePublishCartPositionsRes defines model for PrivatePublishCartPositionsRes.
type PrivatePublishCartPositionsRes = map[string]interface{}

// PrivateReserveProductsReq defines model for PrivateReserveProductsReq.
type PrivateReserveProductsReq struct {
	Messages []PrivateReserveProductsReqMessage `json:"messages"`
}

// PrivateReserveProductsReqMessage defines model for PrivateReserveProductsReqMessage.
type PrivateReserveProductsReqMessage struct {
	OperationId string                           `json:"operation_id"`
	Products    PrivateReserveProductsReqProduct `json:"products"`
}

// PrivateReserveProductsReqProduct defines model for PrivateReserveProductsReqProduct.
type PrivateReserveProductsReqProduct struct {
	Count int    `json:"count"`
	Id    string `json:"id"`
}

// PrivateReserveProductsRes defines model for PrivateReserveProductsRes.
type PrivateReserveProductsRes = map[string]interface{}

// PrivateUnreserveProductsReq defines model for PrivateUnreserveProductsReq.
type PrivateUnreserveProductsReq struct {
	Messages []PrivateUnreserveProductsReqMessage `json:"messages"`
}

// PrivateUnreserveProductsReqMessage defines model for PrivateUnreserveProductsReqMessage.
type PrivateUnreserveProductsReqMessage struct {
	OrderId  string                             `json:"order_id"`
	Products []PrivateReserveProductsReqProduct `json:"products"`
}

// PrivateUnreserveProductsReqProduct defines model for PrivateUnreserveProductsReqProduct.
type PrivateUnreserveProductsReqProduct struct {
	Count int    `json:"count"`
	Id    string `json:"id"`
}

// PrivateUnreserveProductsRes defines model for PrivateUnreserveProductsRes.
type PrivateUnreserveProductsRes = map[string]interface{}

// ReplaceRefreshTokenReq defines model for ReplaceRefreshTokenReq.
type ReplaceRefreshTokenReq struct {
	RefreshToken string `json:"refresh_token"`
}

// ReplaceRefreshTokenRes defines model for ReplaceRefreshTokenRes.
type ReplaceRefreshTokenRes struct {
	ExpiresAt    string `json:"expires_at"`
	RefreshToken string `json:"refresh_token"`
}

// UpdateProductReq defines model for UpdateProductReq.
type UpdateProductReq struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Price       *float64                `json:"price,omitempty"`

	// StockDelta The amount of "in stock" product count change, either of:
	// - positive: stock amount is increased (seller releases more products)
	// - negative: stock amount is decreased (item purchased)
	StockDelta *int `json:"stock_delta,omitempty"`
}

// UpdateProductRes defines model for UpdateProductRes.
type UpdateProductRes struct {
	Description *string                 `json:"description,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Price       *float64                `json:"price,omitempty"`
	Stock       *int                    `json:"stock,omitempty"`
}

// UploadProductPictureRes defines model for UploadProductPictureRes.
type UploadProductPictureRes struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// Error defines model for Error.
type Error struct {
	Errors []Err `json:"errors"`
}

// ProductsListParams defines parameters for ProductsList.
type ProductsListParams struct {
	// Filter Filter, such as "seller.id=foo" or "seller.id=foo&name=bar&in_stock=*"
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// MaxPageSize Max number of returned results
	MaxPageSize   *int    `form:"maxPageSize,omitempty" json:"maxPageSize,omitempty"`
	NextPageToken *string `form:"nextPageToken,omitempty" json:"nextPageToken,omitempty"`
}

// ProductsUploadPictureMultipartBody defines parameters for ProductsUploadPicture.
type ProductsUploadPictureMultipartBody struct {
	Caption *string             `json:"caption,omitempty"`
	File    *openapi_types.File `json:"file,omitempty"`
}

// ProductsReserveJSONRequestBody defines body for ProductsReserve for application/json ContentType.
type ProductsReserveJSONRequestBody = PrivateReserveProductsReq

// ProductsUnreserveJSONRequestBody defines body for ProductsUnreserve for application/json ContentType.
type ProductsUnreserveJSONRequestBody = PrivateUnreserveProductsReq

// ProductsCreateJSONRequestBody defines body for ProductsCreate for application/json ContentType.
type ProductsCreateJSONRequestBody = CreateProductReq

// ProductsUpdateJSONRequestBody defines body for ProductsUpdate for application/json ContentType.
type ProductsUpdateJSONRequestBody = UpdateProductReq

// ProductsUploadPictureMultipartRequestBody defines body for ProductsUploadPicture for multipart/form-data ContentType.
type ProductsUploadPictureMultipartRequestBody ProductsUploadPictureMultipartBody

// Method & Path constants for routes.
// Reserve products
const ProductsReserveMethod = "POST"
const ProductsReservePath = "/api/private/v1/products:reserve"

// List products
const ProductsUnreserveMethod = "POST"
const ProductsUnreservePath = "/api/private/v1/products:unreserve"

// List products
const ProductsListMethod = "GET"
const ProductsListPath = "/api/v1/products"

// Create product
const ProductsCreateMethod = "POST"
const ProductsCreatePath = "/api/v1/products"

const ProductsDeleteMethod = "DELETE"
const ProductsDeletePath = "/api/v1/products/:product_id"

// Get product
const ProductsGetMethod = "GET"
const ProductsGetPath = "/api/v1/products/:product_id"

const ProductsUpdateMethod = "PATCH"
const ProductsUpdatePath = "/api/v1/products/:product_id"

// Upload a product picture
const ProductsUploadPictureMethod = "POST"
const ProductsUploadPicturePath = "/api/v1/products/:product_id/pictures"

// Delete a product picture
const ProductsDeletePictureMethod = "DELETE"
const ProductsDeletePicturePath = "/api/v1/products/:product_id/pictures/:id"

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Reserve products
	// (POST /api/private/v1/products:reserve)
	ProductsReserve(c *gin.Context)
	// List products
	// (POST /api/private/v1/products:unreserve)
	ProductsUnreserve(c *gin.Context)
	// List products
	// (GET /api/v1/products)
	ProductsList(c *gin.Context, params ProductsListParams)
	// Create product
	// (POST /api/v1/products)
	ProductsCreate(c *gin.Context)

	// (DELETE /api/v1/products/{product_id})
	ProductsDelete(c *gin.Context, productId string)
	// Get product
	// (GET /api/v1/products/{product_id})
	ProductsGet(c *gin.Context, productId string)

	// (PATCH /api/v1/products/{product_id})
	ProductsUpdate(c *gin.Context, productId string)
	// Upload a product picture
	// (POST /api/v1/products/{product_id}/pictures)
	ProductsUploadPicture(c *gin.Context, productId string)
	// Delete a product picture
	// (DELETE /api/v1/products/{product_id}/pictures/{id})
	ProductsDeletePicture(c *gin.Context, productId string, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ProductsReserve operation middleware
func (siw *ServerInterfaceWrapper) ProductsReserve(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsReserve(c)
}

// ProductsUnreserve operation middleware
func (siw *ServerInterfaceWrapper) ProductsUnreserve(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsUnreserve(c)
}

// ProductsList operation middleware
func (siw *ServerInterfaceWrapper) ProductsList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductsListParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxPageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxPageSize", c.Request.URL.Query(), &params.MaxPageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxPageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "nextPageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextPageToken", c.Request.URL.Query(), &params.NextPageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nextPageToken: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsList(c, params)
}

// ProductsCreate operation middleware
func (siw *ServerInterfaceWrapper) ProductsCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsCreate(c)
}

// ProductsDelete operation middleware
func (siw *ServerInterfaceWrapper) ProductsDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsDelete(c, productId)
}

// ProductsGet operation middleware
func (siw *ServerInterfaceWrapper) ProductsGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsGet(c, productId)
}

// ProductsUpdate operation middleware
func (siw *ServerInterfaceWrapper) ProductsUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsUpdate(c, productId)
}

// ProductsUploadPicture operation middleware
func (siw *ServerInterfaceWrapper) ProductsUploadPicture(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsUploadPicture(c, productId)
}

// ProductsDeletePicture operation middleware
func (siw *ServerInterfaceWrapper) ProductsDeletePicture(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductsDeletePicture(c, productId, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/private/v1/products:reserve", wrapper.ProductsReserve)
	router.POST(options.BaseURL+"/api/private/v1/products:unreserve", wrapper.ProductsUnreserve)
	router.GET(options.BaseURL+"/api/v1/products", wrapper.ProductsList)
	router.POST(options.BaseURL+"/api/v1/products", wrapper.ProductsCreate)
	router.DELETE(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsDelete)
	router.GET(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsGet)
	router.PATCH(options.BaseURL+"/api/v1/products/:product_id", wrapper.ProductsUpdate)
	router.POST(options.BaseURL+"/api/v1/products/:product_id/pictures", wrapper.ProductsUploadPicture)
	router.DELETE(options.BaseURL+"/api/v1/products/:product_id/pictures/:id", wrapper.ProductsDeletePicture)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"W/Fo837zvwAAAP//LBiX8+RqAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
